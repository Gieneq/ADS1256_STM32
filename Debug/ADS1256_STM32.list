
ADS1256_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004370  08004370  00014370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043b0  080043b0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080043b0  080043b0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043b0  080043b0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043b0  080043b0  000143b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043b4  080043b4  000143b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080043b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000010  080043c8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080043c8  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e295  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfd  00000000  00000000  0002e2d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0002ffd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00030e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025fa8  00000000  00000000  00031b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7d4  00000000  00000000  00057af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edbbc  00000000  00000000  000662cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00153e88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b6c  00000000  00000000  00153edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004358 	.word	0x08004358

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004358 	.word	0x08004358

080001c8 <delay_us>:
//	spi_ads_data[1] = 0x000F;
//	spi_ads_data[2] = 0xFFFF;
//	spi_ads_data[3] = 0xFFFF;
//}

void delay_us (uint16_t us) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6,0);  // set the counter value a 0
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <delay_us+0x30>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2200      	movs	r2, #0
 80001d8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < us);  // wait for the counter to reach the us input in the parameter
 80001da:	bf00      	nop
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <delay_us+0x30>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001e2:	88fb      	ldrh	r3, [r7, #6]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d3f9      	bcc.n	80001dc <delay_us+0x14>
}
 80001e8:	bf00      	nop
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	200000e8 	.word	0x200000e8

080001fc <ADS_waitDRDY>:

void ADS_waitDRDY() {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	  while (HAL_GPIO_ReadPin(ADS_DDRY_GPIO_Port, ADS_DDRY_Pin));
 8000200:	bf00      	nop
 8000202:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000206:	4804      	ldr	r0, [pc, #16]	; (8000218 <ADS_waitDRDY+0x1c>)
 8000208:	f001 fa3a 	bl	8001680 <HAL_GPIO_ReadPin>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d1f7      	bne.n	8000202 <ADS_waitDRDY+0x6>
}
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}
 8000218:	48000400 	.word	0x48000400

0800021c <ADS_sendCommand>:

void ADS_sendCommand(uint8_t reg) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
	ADS_waitDRDY();
 8000226:	f7ff ffe9 	bl	80001fc <ADS_waitDRDY>
	HAL_SPI_Transmit(&hspi2, &reg, 1, HAL_MAX_DELAY);
 800022a:	1df9      	adds	r1, r7, #7
 800022c:	f04f 33ff 	mov.w	r3, #4294967295
 8000230:	2201      	movs	r2, #1
 8000232:	4805      	ldr	r0, [pc, #20]	; (8000248 <ADS_sendCommand+0x2c>)
 8000234:	f002 f939 	bl	80024aa <HAL_SPI_Transmit>
  delay_us(1);              //  t11 delay (4*tCLKIN 4*0.13 = 0.52 us)
 8000238:	2001      	movs	r0, #1
 800023a:	f7ff ffc5 	bl	80001c8 <delay_us>
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	2000002c 	.word	0x2000002c

0800024c <ADS_readRegister>:

uint8_t ADS_readRegister(uint8_t reg) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
  uint8_t readValue = 0;
 8000256:	2300      	movs	r3, #0
 8000258:	73fb      	strb	r3, [r7, #15]
  uint8_t buff[] = {ADS1256_CMD_RREG | reg, 0};
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	f043 0310 	orr.w	r3, r3, #16
 8000260:	b2db      	uxtb	r3, r3
 8000262:	733b      	strb	r3, [r7, #12]
 8000264:	2300      	movs	r3, #0
 8000266:	737b      	strb	r3, [r7, #13]
  HAL_SPI_Transmit(&hspi2, buff, 2, HAL_MAX_DELAY);
 8000268:	f107 010c 	add.w	r1, r7, #12
 800026c:	f04f 33ff 	mov.w	r3, #4294967295
 8000270:	2202      	movs	r2, #2
 8000272:	480b      	ldr	r0, [pc, #44]	; (80002a0 <ADS_readRegister+0x54>)
 8000274:	f002 f919 	bl	80024aa <HAL_SPI_Transmit>
  delay_us(7);              //  t6 delay (4*tCLKIN 50*0.13 = 6.5 us)
 8000278:	2007      	movs	r0, #7
 800027a:	f7ff ffa5 	bl	80001c8 <delay_us>
  HAL_SPI_Receive(&hspi2, &readValue, 1, HAL_MAX_DELAY);
 800027e:	f107 010f 	add.w	r1, r7, #15
 8000282:	f04f 33ff 	mov.w	r3, #4294967295
 8000286:	2201      	movs	r2, #1
 8000288:	4805      	ldr	r0, [pc, #20]	; (80002a0 <ADS_readRegister+0x54>)
 800028a:	f002 fa7c 	bl	8002786 <HAL_SPI_Receive>
  delay_us(1);              //  t11 delay (4*tCLKIN 4*0.13 = 0.52 us)
 800028e:	2001      	movs	r0, #1
 8000290:	f7ff ff9a 	bl	80001c8 <delay_us>
  return readValue;
 8000294:	7bfb      	ldrb	r3, [r7, #15]
}
 8000296:	4618      	mov	r0, r3
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	2000002c 	.word	0x2000002c

080002a4 <ADS_writeRegister>:

void ADS_writeRegister(uint8_t reg, uint8_t wdata) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	460a      	mov	r2, r1
 80002ae:	71fb      	strb	r3, [r7, #7]
 80002b0:	4613      	mov	r3, r2
 80002b2:	71bb      	strb	r3, [r7, #6]
  uint8_t buff[3] = {ADS1256_CMD_WREG | reg, 0, wdata};
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	733b      	strb	r3, [r7, #12]
 80002be:	2300      	movs	r3, #0
 80002c0:	737b      	strb	r3, [r7, #13]
 80002c2:	79bb      	ldrb	r3, [r7, #6]
 80002c4:	73bb      	strb	r3, [r7, #14]
  HAL_SPI_Transmit(&hspi2, buff, 3, HAL_MAX_DELAY);
 80002c6:	f107 010c 	add.w	r1, r7, #12
 80002ca:	f04f 33ff 	mov.w	r3, #4294967295
 80002ce:	2203      	movs	r2, #3
 80002d0:	4804      	ldr	r0, [pc, #16]	; (80002e4 <ADS_writeRegister+0x40>)
 80002d2:	f002 f8ea 	bl	80024aa <HAL_SPI_Transmit>
  delay_us(1);
 80002d6:	2001      	movs	r0, #1
 80002d8:	f7ff ff76 	bl	80001c8 <delay_us>
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	2000002c 	.word	0x2000002c

080002e8 <ADS_getStatus>:

uint8_t ADS_getStatus() {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	ADS_sendCommand(ADS1256_CMD_SDATAC);  // send out ADS1256_CMD_SDATAC command to stop continous reading mode.
 80002ec:	200f      	movs	r0, #15
 80002ee:	f7ff ff95 	bl	800021c <ADS_sendCommand>
  return ADS_readRegister(ADS1256_RADD_STATUS);
 80002f2:	2000      	movs	r0, #0
 80002f4:	f7ff ffaa 	bl	800024c <ADS_readRegister>
 80002f8:	4603      	mov	r3, r0
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <ADS_begin_drate>:
	ADS_sendCommand(ADS1256_CMD_SELFCAL);
	ADS_waitDRDY();
	return status;
}

int ADS_begin_drate(uint8_t drate, uint8_t gain, uint8_t buffenable) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
 800030a:	460b      	mov	r3, r1
 800030c:	71bb      	strb	r3, [r7, #6]
 800030e:	4613      	mov	r3, r2
 8000310:	717b      	strb	r3, [r7, #5]
  _pga = 1 << gain;
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	2201      	movs	r2, #1
 8000316:	fa02 f303 	lsl.w	r3, r2, r3
 800031a:	b2da      	uxtb	r2, r3
 800031c:	4b1e      	ldr	r3, [pc, #120]	; (8000398 <ADS_begin_drate+0x98>)
 800031e:	701a      	strb	r2, [r3, #0]
  ADS_sendCommand(ADS1256_CMD_SDATAC);  // send out ADS1256_CMD_SDATAC command to stop continous reading mode.
 8000320:	200f      	movs	r0, #15
 8000322:	f7ff ff7b 	bl	800021c <ADS_sendCommand>
  ADS_writeRegister(ADS1256_RADD_DRATE, drate);  // write data rate register
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	4619      	mov	r1, r3
 800032a:	2003      	movs	r0, #3
 800032c:	f7ff ffba 	bl	80002a4 <ADS_writeRegister>
  uint8_t bytemask = 0x07;
 8000330:	2307      	movs	r3, #7
 8000332:	73bb      	strb	r3, [r7, #14]
  uint8_t adcon = ADS_readRegister(ADS1256_RADD_ADCON);
 8000334:	2002      	movs	r0, #2
 8000336:	f7ff ff89 	bl	800024c <ADS_readRegister>
 800033a:	4603      	mov	r3, r0
 800033c:	737b      	strb	r3, [r7, #13]
  uint8_t byte2send = (adcon & ~bytemask) | gain;
 800033e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000342:	43db      	mvns	r3, r3
 8000344:	b25a      	sxtb	r2, r3
 8000346:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800034a:	4013      	ands	r3, r2
 800034c:	b25a      	sxtb	r2, r3
 800034e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000352:	4313      	orrs	r3, r2
 8000354:	b25b      	sxtb	r3, r3
 8000356:	733b      	strb	r3, [r7, #12]
  ADS_writeRegister(ADS1256_RADD_ADCON, byte2send);
 8000358:	7b3b      	ldrb	r3, [r7, #12]
 800035a:	4619      	mov	r1, r3
 800035c:	2002      	movs	r0, #2
 800035e:	f7ff ffa1 	bl	80002a4 <ADS_writeRegister>
  uint8_t status = ADS_readRegister(ADS1256_RADD_STATUS);
 8000362:	2000      	movs	r0, #0
 8000364:	f7ff ff72 	bl	800024c <ADS_readRegister>
 8000368:	4603      	mov	r3, r0
 800036a:	73fb      	strb	r3, [r7, #15]
  if (buffenable) {
 800036c:	797b      	ldrb	r3, [r7, #5]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <ADS_begin_drate+0x84>
	status |= (1<<0);//bitSet(status, 1);
 8000372:	7bfb      	ldrb	r3, [r7, #15]
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	73fb      	strb	r3, [r7, #15]
	ADS_writeRegister(ADS1256_RADD_STATUS, status);
 800037a:	7bfb      	ldrb	r3, [r7, #15]
 800037c:	4619      	mov	r1, r3
 800037e:	2000      	movs	r0, #0
 8000380:	f7ff ff90 	bl	80002a4 <ADS_writeRegister>
  }
  ADS_sendCommand(ADS1256_CMD_SELFCAL);  // perform self calibration
 8000384:	20f0      	movs	r0, #240	; 0xf0
 8000386:	f7ff ff49 	bl	800021c <ADS_sendCommand>
  ADS_waitDRDY();  // wait ADS1256 to settle after self calibration
 800038a:	f7ff ff37 	bl	80001fc <ADS_waitDRDY>
  return status;
 800038e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000000 	.word	0x20000000

0800039c <ADS_setChannel>:

void ADS_setChannel(uint8_t AIN_P, uint8_t AIN_N) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	460a      	mov	r2, r1
 80003a6:	71fb      	strb	r3, [r7, #7]
 80003a8:	4613      	mov	r3, r2
 80003aa:	71bb      	strb	r3, [r7, #6]
  uint8_t MUX_CHANNEL;
  uint8_t MUXP;
  uint8_t MUXN;

  switch (AIN_P) {
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	2b07      	cmp	r3, #7
 80003b0:	d82a      	bhi.n	8000408 <ADS_setChannel+0x6c>
 80003b2:	a201      	add	r2, pc, #4	; (adr r2, 80003b8 <ADS_setChannel+0x1c>)
 80003b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b8:	080003d9 	.word	0x080003d9
 80003bc:	080003df 	.word	0x080003df
 80003c0:	080003e5 	.word	0x080003e5
 80003c4:	080003eb 	.word	0x080003eb
 80003c8:	080003f1 	.word	0x080003f1
 80003cc:	080003f7 	.word	0x080003f7
 80003d0:	080003fd 	.word	0x080003fd
 80003d4:	08000403 	.word	0x08000403
    case 0:
      MUXP = ADS1256_MUXP_AIN0;
 80003d8:	2300      	movs	r3, #0
 80003da:	73fb      	strb	r3, [r7, #15]
      break;
 80003dc:	e016      	b.n	800040c <ADS_setChannel+0x70>
    case 1:
      MUXP = ADS1256_MUXP_AIN1;
 80003de:	2310      	movs	r3, #16
 80003e0:	73fb      	strb	r3, [r7, #15]
      break;
 80003e2:	e013      	b.n	800040c <ADS_setChannel+0x70>
    case 2:
      MUXP = ADS1256_MUXP_AIN2;
 80003e4:	2320      	movs	r3, #32
 80003e6:	73fb      	strb	r3, [r7, #15]
      break;
 80003e8:	e010      	b.n	800040c <ADS_setChannel+0x70>
    case 3:
      MUXP = ADS1256_MUXP_AIN3;
 80003ea:	2330      	movs	r3, #48	; 0x30
 80003ec:	73fb      	strb	r3, [r7, #15]
      break;
 80003ee:	e00d      	b.n	800040c <ADS_setChannel+0x70>
    case 4:
      MUXP = ADS1256_MUXP_AIN4;
 80003f0:	2340      	movs	r3, #64	; 0x40
 80003f2:	73fb      	strb	r3, [r7, #15]
      break;
 80003f4:	e00a      	b.n	800040c <ADS_setChannel+0x70>
    case 5:
      MUXP = ADS1256_MUXP_AIN5;
 80003f6:	2350      	movs	r3, #80	; 0x50
 80003f8:	73fb      	strb	r3, [r7, #15]
      break;
 80003fa:	e007      	b.n	800040c <ADS_setChannel+0x70>
    case 6:
      MUXP = ADS1256_MUXP_AIN6;
 80003fc:	2360      	movs	r3, #96	; 0x60
 80003fe:	73fb      	strb	r3, [r7, #15]
      break;
 8000400:	e004      	b.n	800040c <ADS_setChannel+0x70>
    case 7:
      MUXP = ADS1256_MUXP_AIN7;
 8000402:	2370      	movs	r3, #112	; 0x70
 8000404:	73fb      	strb	r3, [r7, #15]
      break;
 8000406:	e001      	b.n	800040c <ADS_setChannel+0x70>
    default:
      MUXP = ADS1256_MUXP_AINCOM;
 8000408:	2380      	movs	r3, #128	; 0x80
 800040a:	73fb      	strb	r3, [r7, #15]
  }

  switch (AIN_N) {
 800040c:	79bb      	ldrb	r3, [r7, #6]
 800040e:	2b07      	cmp	r3, #7
 8000410:	d82a      	bhi.n	8000468 <ADS_setChannel+0xcc>
 8000412:	a201      	add	r2, pc, #4	; (adr r2, 8000418 <ADS_setChannel+0x7c>)
 8000414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000418:	08000439 	.word	0x08000439
 800041c:	0800043f 	.word	0x0800043f
 8000420:	08000445 	.word	0x08000445
 8000424:	0800044b 	.word	0x0800044b
 8000428:	08000451 	.word	0x08000451
 800042c:	08000457 	.word	0x08000457
 8000430:	0800045d 	.word	0x0800045d
 8000434:	08000463 	.word	0x08000463
    case 0:
      MUXN = ADS1256_MUXN_AIN0;
 8000438:	2300      	movs	r3, #0
 800043a:	73bb      	strb	r3, [r7, #14]
      break;
 800043c:	e016      	b.n	800046c <ADS_setChannel+0xd0>
    case 1:
      MUXN = ADS1256_MUXN_AIN1;
 800043e:	2301      	movs	r3, #1
 8000440:	73bb      	strb	r3, [r7, #14]
      break;
 8000442:	e013      	b.n	800046c <ADS_setChannel+0xd0>
    case 2:
      MUXN = ADS1256_MUXN_AIN2;
 8000444:	2302      	movs	r3, #2
 8000446:	73bb      	strb	r3, [r7, #14]
      break;
 8000448:	e010      	b.n	800046c <ADS_setChannel+0xd0>
    case 3:
      MUXN = ADS1256_MUXN_AIN3;
 800044a:	2303      	movs	r3, #3
 800044c:	73bb      	strb	r3, [r7, #14]
      break;
 800044e:	e00d      	b.n	800046c <ADS_setChannel+0xd0>
    case 4:
      MUXN = ADS1256_MUXN_AIN4;
 8000450:	2304      	movs	r3, #4
 8000452:	73bb      	strb	r3, [r7, #14]
      break;
 8000454:	e00a      	b.n	800046c <ADS_setChannel+0xd0>
    case 5:
      MUXN = ADS1256_MUXN_AIN5;
 8000456:	2305      	movs	r3, #5
 8000458:	73bb      	strb	r3, [r7, #14]
      break;
 800045a:	e007      	b.n	800046c <ADS_setChannel+0xd0>
    case 6:
      MUXN = ADS1256_MUXN_AIN6;
 800045c:	2306      	movs	r3, #6
 800045e:	73bb      	strb	r3, [r7, #14]
      break;
 8000460:	e004      	b.n	800046c <ADS_setChannel+0xd0>
    case 7:
      MUXN = ADS1256_MUXN_AIN7;
 8000462:	2307      	movs	r3, #7
 8000464:	73bb      	strb	r3, [r7, #14]
      break;
 8000466:	e001      	b.n	800046c <ADS_setChannel+0xd0>
    default:
      MUXN = ADS1256_MUXN_AINCOM;
 8000468:	2308      	movs	r3, #8
 800046a:	73bb      	strb	r3, [r7, #14]
  }

  MUX_CHANNEL = MUXP | MUXN;
 800046c:	7bfa      	ldrb	r2, [r7, #15]
 800046e:	7bbb      	ldrb	r3, [r7, #14]
 8000470:	4313      	orrs	r3, r2
 8000472:	737b      	strb	r3, [r7, #13]

  ADS_writeRegister(ADS1256_RADD_MUX, MUX_CHANNEL);
 8000474:	7b7b      	ldrb	r3, [r7, #13]
 8000476:	4619      	mov	r1, r3
 8000478:	2001      	movs	r0, #1
 800047a:	f7ff ff13 	bl	80002a4 <ADS_writeRegister>
  ADS_sendCommand(ADS1256_CMD_SYNC);
 800047e:	20fc      	movs	r0, #252	; 0xfc
 8000480:	f7ff fecc 	bl	800021c <ADS_sendCommand>
  ADS_sendCommand(ADS1256_CMD_WAKEUP);
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff fec9 	bl	800021c <ADS_sendCommand>
}
 800048a:	bf00      	nop
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop

08000494 <ADS_setPChannel>:

void ADS_setPChannel(uint8_t channel) { ADS_setChannel(channel, -1); }
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	21ff      	movs	r1, #255	; 0xff
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ff7a 	bl	800039c <ADS_setChannel>
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	80fb      	strh	r3, [r7, #6]

}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
	...

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fc1a 	bl	8000d06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f859 	bl	8000588 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 80004d6:	f000 f995 	bl	8000804 <MX_DMA_Init>
  #define MX_DMA_Init() do {} while(0)
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f9b9 	bl	8000850 <MX_GPIO_Init>
  MX_SPI2_Init();
 80004de:	f000 f8a7 	bl	8000630 <MX_SPI2_Init>
  MX_DMA_Init();
  MX_TIM6_Init();
 80004e2:	f000 f959 	bl	8000798 <MX_TIM6_Init>
  MX_TIM2_Init();
 80004e6:	f000 f8e1 	bl	80006ac <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim6);
 80004ea:	4824      	ldr	r0, [pc, #144]	; (800057c <main+0xb4>)
 80004ec:	f002 fea2 	bl	8003234 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80004f0:	4823      	ldr	r0, [pc, #140]	; (8000580 <main+0xb8>)
 80004f2:	f002 fe9f 	bl	8003234 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004f6:	2100      	movs	r1, #0
 80004f8:	4821      	ldr	r0, [pc, #132]	; (8000580 <main+0xb8>)
 80004fa:	f002 ff65 	bl	80033c8 <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 80004fe:	2064      	movs	r0, #100	; 0x64
 8000500:	f000 fc76 	bl	8000df0 <HAL_Delay>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2120      	movs	r1, #32
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f001 f8d0 	bl	80016b0 <HAL_GPIO_WritePin>

  HAL_Delay(1);
 8000510:	2001      	movs	r0, #1
 8000512:	f000 fc6d 	bl	8000df0 <HAL_Delay>
  HAL_GPIO_WritePin(ADS_RST_GPIO_Port, ADS_RST_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051c:	4819      	ldr	r0, [pc, #100]	; (8000584 <main+0xbc>)
 800051e:	f001 f8c7 	bl	80016b0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000522:	2001      	movs	r0, #1
 8000524:	f000 fc64 	bl	8000df0 <HAL_Delay>
  HAL_GPIO_WritePin(ADS_RST_GPIO_Port, ADS_RST_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052e:	4815      	ldr	r0, [pc, #84]	; (8000584 <main+0xbc>)
 8000530:	f001 f8be 	bl	80016b0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f000 fc5b 	bl	8000df0 <HAL_Delay>

  int aw = ADS_getStatus();
 800053a:	f7ff fed5 	bl	80002e8 <ADS_getStatus>
 800053e:	4603      	mov	r3, r0
 8000540:	607b      	str	r3, [r7, #4]

  if(aw == 0x30)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b30      	cmp	r3, #48	; 0x30
 8000546:	d106      	bne.n	8000556 <main+0x8e>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2120      	movs	r1, #32
 800054c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000550:	f001 f8ae 	bl	80016b0 <HAL_GPIO_WritePin>
 8000554:	e005      	b.n	8000562 <main+0x9a>
  else
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2120      	movs	r1, #32
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f001 f8a7 	bl	80016b0 <HAL_GPIO_WritePin>
//
////  ADS_begin_drate(ADS1256_DRATE_500SPS, ADS1256_GAIN_1, 0);
////  ADS_begin_drate(ADS1256_DRATE_5SPS, ADS1256_GAIN_1, 0);
  ADS_begin_drate(ADS1256_DRATE_30000SPS, ADS1256_GAIN_1, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	20f0      	movs	r0, #240	; 0xf0
 8000568:	f7ff feca 	bl	8000300 <ADS_begin_drate>
////  ADS_begin_drate(ADS1256_DRATE_15000SPS, ADS1256_GAIN_1, 0);
  ADS_setPChannel(7);
 800056c:	2007      	movs	r0, #7
 800056e:	f7ff ff91 	bl	8000494 <ADS_setPChannel>
//  HAL_SPI_Receive(&hspi2, someinbuff, 3, HAL_MAX_DELAY);

//  dosth();
  while (1)
  {
	  aw = ADS_getStatus();
 8000572:	f7ff feb9 	bl	80002e8 <ADS_getStatus>
 8000576:	4603      	mov	r3, r0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	e7fa      	b.n	8000572 <main+0xaa>
 800057c:	200000e8 	.word	0x200000e8
 8000580:	20000134 	.word	0x20000134
 8000584:	48000400 	.word	0x48000400

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b096      	sub	sp, #88	; 0x58
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	2244      	movs	r2, #68	; 0x44
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fed6 	bl	8004348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	463b      	mov	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ae:	f001 f8bd 	bl	800172c <HAL_PWREx_ControlVoltageScaling>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b8:	f000 f9d6 	bl	8000968 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005bc:	2310      	movs	r3, #16
 80005be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c8:	2360      	movs	r3, #96	; 0x60
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005d0:	2301      	movs	r3, #1
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005d8:	2328      	movs	r3, #40	; 0x28
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005dc:	2307      	movs	r3, #7
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 f8f3 	bl	80017d8 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005f8:	f000 f9b6 	bl	8000968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2303      	movs	r3, #3
 8000602:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	2104      	movs	r1, #4
 8000616:	4618      	mov	r0, r3
 8000618:	f001 fcb8 	bl	8001f8c <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000622:	f000 f9a1 	bl	8000968 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3758      	adds	r7, #88	; 0x58
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000636:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <MX_SPI2_Init+0x78>)
 8000638:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_SPI2_Init+0x74>)
 800063c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000640:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_SPI2_Init+0x74>)
 800064a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800064e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000658:	2201      	movs	r2, #1
 800065a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_SPI2_Init+0x74>)
 800065e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000662:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_SPI2_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_SPI2_Init+0x74>)
 800067e:	2207      	movs	r2, #7
 8000680:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_SPI2_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000690:	f001 fe68 	bl	8002364 <HAL_SPI_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800069a:	f000 f965 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000002c 	.word	0x2000002c
 80006a8:	40003800 	.word	0x40003800

080006ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08e      	sub	sp, #56	; 0x38
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006cc:	463b      	mov	r3, r7
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
 80006da:	615a      	str	r2, [r3, #20]
 80006dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <MX_TIM2_Init+0xe8>)
 80006e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80006e6:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <MX_TIM2_Init+0xe8>)
 80006e8:	2207      	movs	r2, #7
 80006ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ec:	4b29      	ldr	r3, [pc, #164]	; (8000794 <MX_TIM2_Init+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8-1;
 80006f2:	4b28      	ldr	r3, [pc, #160]	; (8000794 <MX_TIM2_Init+0xe8>)
 80006f4:	2207      	movs	r2, #7
 80006f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <MX_TIM2_Init+0xe8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <MX_TIM2_Init+0xe8>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000704:	4823      	ldr	r0, [pc, #140]	; (8000794 <MX_TIM2_Init+0xe8>)
 8000706:	f002 fd3d 	bl	8003184 <HAL_TIM_Base_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000710:	f000 f92a 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800071a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800071e:	4619      	mov	r1, r3
 8000720:	481c      	ldr	r0, [pc, #112]	; (8000794 <MX_TIM2_Init+0xe8>)
 8000722:	f003 f86b 	bl	80037fc <HAL_TIM_ConfigClockSource>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800072c:	f000 f91c 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000730:	4818      	ldr	r0, [pc, #96]	; (8000794 <MX_TIM2_Init+0xe8>)
 8000732:	f002 fde7 	bl	8003304 <HAL_TIM_PWM_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800073c:	f000 f914 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4619      	mov	r1, r3
 800074e:	4811      	ldr	r0, [pc, #68]	; (8000794 <MX_TIM2_Init+0xe8>)
 8000750:	f003 fd4e 	bl	80041f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800075a:	f000 f905 	bl	8000968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800075e:	2360      	movs	r3, #96	; 0x60
 8000760:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5-1;
 8000762:	2304      	movs	r3, #4
 8000764:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000766:	2302      	movs	r3, #2
 8000768:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	4619      	mov	r1, r3
 8000774:	4807      	ldr	r0, [pc, #28]	; (8000794 <MX_TIM2_Init+0xe8>)
 8000776:	f002 ff2d 	bl	80035d4 <HAL_TIM_PWM_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000780:	f000 f8f2 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <MX_TIM2_Init+0xe8>)
 8000786:	f000 fa09 	bl	8000b9c <HAL_TIM_MspPostInit>

}
 800078a:	bf00      	nop
 800078c:	3738      	adds	r7, #56	; 0x38
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000134 	.word	0x20000134

08000798 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_TIM6_Init+0x64>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_TIM6_Init+0x68>)
 80007ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_TIM6_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_TIM6_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_TIM6_Init+0x64>)
 80007bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_TIM6_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <MX_TIM6_Init+0x64>)
 80007ca:	f002 fcdb 	bl	8003184 <HAL_TIM_Base_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80007d4:	f000 f8c8 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_TIM6_Init+0x64>)
 80007e6:	f003 fd03 	bl	80041f0 <HAL_TIMEx_MasterConfigSynchronization>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80007f0:	f000 f8ba 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000e8 	.word	0x200000e8
 8000800:	40001000 	.word	0x40001000

08000804 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_DMA_Init+0x48>)
 800080c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800080e:	4a0f      	ldr	r2, [pc, #60]	; (800084c <MX_DMA_Init+0x48>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6493      	str	r3, [r2, #72]	; 0x48
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <MX_DMA_Init+0x48>)
 8000818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 6, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2106      	movs	r1, #6
 8000826:	200e      	movs	r0, #14
 8000828:	f000 fbe1 	bl	8000fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800082c:	200e      	movs	r0, #14
 800082e:	f000 fbfa 	bl	8001026 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 6, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2106      	movs	r1, #6
 8000836:	200f      	movs	r0, #15
 8000838:	f000 fbd9 	bl	8000fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800083c:	200f      	movs	r0, #15
 800083e:	f000 fbf2 	bl	8001026 <HAL_NVIC_EnableIRQ>

}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b3d      	ldr	r3, [pc, #244]	; (800095c <MX_GPIO_Init+0x10c>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a3c      	ldr	r2, [pc, #240]	; (800095c <MX_GPIO_Init+0x10c>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b3a      	ldr	r3, [pc, #232]	; (800095c <MX_GPIO_Init+0x10c>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b37      	ldr	r3, [pc, #220]	; (800095c <MX_GPIO_Init+0x10c>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a36      	ldr	r2, [pc, #216]	; (800095c <MX_GPIO_Init+0x10c>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b34      	ldr	r3, [pc, #208]	; (800095c <MX_GPIO_Init+0x10c>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b31      	ldr	r3, [pc, #196]	; (800095c <MX_GPIO_Init+0x10c>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a30      	ldr	r2, [pc, #192]	; (800095c <MX_GPIO_Init+0x10c>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b2e      	ldr	r3, [pc, #184]	; (800095c <MX_GPIO_Init+0x10c>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2101      	movs	r1, #1
 80008b2:	482b      	ldr	r0, [pc, #172]	; (8000960 <MX_GPIO_Init+0x110>)
 80008b4:	f000 fefc 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2160      	movs	r1, #96	; 0x60
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c0:	f000 fef6 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADS_RST_GPIO_Port, ADS_RST_Pin, GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ca:	4826      	ldr	r0, [pc, #152]	; (8000964 <MX_GPIO_Init+0x114>)
 80008cc:	f000 fef0 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ADS_CS_Pin */
  GPIO_InitStruct.Pin = ADS_CS_Pin;
 80008d0:	2301      	movs	r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ADS_CS_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	4619      	mov	r1, r3
 80008e6:	481e      	ldr	r0, [pc, #120]	; (8000960 <MX_GPIO_Init+0x110>)
 80008e8:	f000 fd20 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LD2_Pin;
 80008ec:	2360      	movs	r3, #96	; 0x60
 80008ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4619      	mov	r1, r3
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f000 fd11 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_RST_Pin */
  GPIO_InitStruct.Pin = ADS_RST_Pin;
 800090a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ADS_RST_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	4619      	mov	r1, r3
 8000922:	4810      	ldr	r0, [pc, #64]	; (8000964 <MX_GPIO_Init+0x114>)
 8000924:	f000 fd02 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_DDRY_Pin */
  GPIO_InitStruct.Pin = ADS_DDRY_Pin;
 8000928:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800092c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800092e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ADS_DDRY_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	4809      	ldr	r0, [pc, #36]	; (8000964 <MX_GPIO_Init+0x114>)
 8000940:	f000 fcf4 	bl	800132c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2028      	movs	r0, #40	; 0x28
 800094a:	f000 fb50 	bl	8000fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800094e:	2028      	movs	r0, #40	; 0x28
 8000950:	f000 fb69 	bl	8001026 <HAL_NVIC_EnableIRQ>

}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000
 8000960:	48000800 	.word	0x48000800
 8000964:	48000400 	.word	0x48000400

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_MspInit+0x44>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6613      	str	r3, [r2, #96]	; 0x60
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_MspInit+0x44>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x44>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6593      	str	r3, [r2, #88]	; 0x58
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a4f      	ldr	r2, [pc, #316]	; (8000b18 <HAL_SPI_MspInit+0x15c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	f040 8097 	bne.w	8000b0e <HAL_SPI_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009e0:	4b4e      	ldr	r3, [pc, #312]	; (8000b1c <HAL_SPI_MspInit+0x160>)
 80009e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e4:	4a4d      	ldr	r2, [pc, #308]	; (8000b1c <HAL_SPI_MspInit+0x160>)
 80009e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ea:	6593      	str	r3, [r2, #88]	; 0x58
 80009ec:	4b4b      	ldr	r3, [pc, #300]	; (8000b1c <HAL_SPI_MspInit+0x160>)
 80009ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f8:	4b48      	ldr	r3, [pc, #288]	; (8000b1c <HAL_SPI_MspInit+0x160>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fc:	4a47      	ldr	r2, [pc, #284]	; (8000b1c <HAL_SPI_MspInit+0x160>)
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a04:	4b45      	ldr	r3, [pc, #276]	; (8000b1c <HAL_SPI_MspInit+0x160>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a08:	f003 0304 	and.w	r3, r3, #4
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a10:	4b42      	ldr	r3, [pc, #264]	; (8000b1c <HAL_SPI_MspInit+0x160>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a14:	4a41      	ldr	r2, [pc, #260]	; (8000b1c <HAL_SPI_MspInit+0x160>)
 8000a16:	f043 0302 	orr.w	r3, r3, #2
 8000a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1c:	4b3f      	ldr	r3, [pc, #252]	; (8000b1c <HAL_SPI_MspInit+0x160>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a20:	f003 0302 	and.w	r3, r3, #2
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a28:	230c      	movs	r3, #12
 8000a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a38:	2305      	movs	r3, #5
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4837      	ldr	r0, [pc, #220]	; (8000b20 <HAL_SPI_MspInit+0x164>)
 8000a44:	f000 fc72 	bl	800132c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000a48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a5a:	2305      	movs	r3, #5
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	482f      	ldr	r0, [pc, #188]	; (8000b24 <HAL_SPI_MspInit+0x168>)
 8000a66:	f000 fc61 	bl	800132c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000a6a:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <HAL_SPI_MspInit+0x16c>)
 8000a6c:	4a2f      	ldr	r2, [pc, #188]	; (8000b2c <HAL_SPI_MspInit+0x170>)
 8000a6e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8000a70:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <HAL_SPI_MspInit+0x16c>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a76:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <HAL_SPI_MspInit+0x16c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <HAL_SPI_MspInit+0x16c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a82:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <HAL_SPI_MspInit+0x16c>)
 8000a84:	2280      	movs	r2, #128	; 0x80
 8000a86:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a88:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <HAL_SPI_MspInit+0x16c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <HAL_SPI_MspInit+0x16c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <HAL_SPI_MspInit+0x16c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <HAL_SPI_MspInit+0x16c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000aa0:	4821      	ldr	r0, [pc, #132]	; (8000b28 <HAL_SPI_MspInit+0x16c>)
 8000aa2:	f000 fadb 	bl	800105c <HAL_DMA_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 8000aac:	f7ff ff5c 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <HAL_SPI_MspInit+0x16c>)
 8000ab4:	659a      	str	r2, [r3, #88]	; 0x58
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <HAL_SPI_MspInit+0x16c>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_SPI_MspInit+0x174>)
 8000abe:	4a1d      	ldr	r2, [pc, #116]	; (8000b34 <HAL_SPI_MspInit+0x178>)
 8000ac0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <HAL_SPI_MspInit+0x174>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_SPI_MspInit+0x174>)
 8000aca:	2210      	movs	r2, #16
 8000acc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <HAL_SPI_MspInit+0x174>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_SPI_MspInit+0x174>)
 8000ad6:	2280      	movs	r2, #128	; 0x80
 8000ad8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_SPI_MspInit+0x174>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <HAL_SPI_MspInit+0x174>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000ae6:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_SPI_MspInit+0x174>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <HAL_SPI_MspInit+0x174>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000af2:	480f      	ldr	r0, [pc, #60]	; (8000b30 <HAL_SPI_MspInit+0x174>)
 8000af4:	f000 fab2 	bl	800105c <HAL_DMA_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_SPI_MspInit+0x146>
    {
      Error_Handler();
 8000afe:	f7ff ff33 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_SPI_MspInit+0x174>)
 8000b06:	655a      	str	r2, [r3, #84]	; 0x54
 8000b08:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <HAL_SPI_MspInit+0x174>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40003800 	.word	0x40003800
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000800 	.word	0x48000800
 8000b24:	48000400 	.word	0x48000400
 8000b28:	20000090 	.word	0x20000090
 8000b2c:	40020044 	.word	0x40020044
 8000b30:	20000180 	.word	0x20000180
 8000b34:	40020058 	.word	0x40020058

08000b38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b48:	d10c      	bne.n	8000b64 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_TIM_Base_MspInit+0x5c>)
 8000b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4e:	4a11      	ldr	r2, [pc, #68]	; (8000b94 <HAL_TIM_Base_MspInit+0x5c>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6593      	str	r3, [r2, #88]	; 0x58
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <HAL_TIM_Base_MspInit+0x5c>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000b62:	e010      	b.n	8000b86 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <HAL_TIM_Base_MspInit+0x60>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d10b      	bne.n	8000b86 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_TIM_Base_MspInit+0x5c>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <HAL_TIM_Base_MspInit+0x5c>)
 8000b74:	f043 0310 	orr.w	r3, r3, #16
 8000b78:	6593      	str	r3, [r2, #88]	; 0x58
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_TIM_Base_MspInit+0x5c>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7e:	f003 0310 	and.w	r3, r3, #16
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40001000 	.word	0x40001000

08000b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bbc:	d11c      	bne.n	8000bf8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <HAL_TIM_MspPostInit+0x64>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <HAL_TIM_MspPostInit+0x64>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <HAL_TIM_MspPostInit+0x64>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f000 fb9a 	bl	800132c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	3720      	adds	r7, #32
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40021000 	.word	0x40021000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f8ae 	bl	8000db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <DMA1_Channel4_IRQHandler+0x10>)
 8000c5e:	f000 fab5 	bl	80011cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000090 	.word	0x20000090

08000c6c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <DMA1_Channel5_IRQHandler+0x10>)
 8000c72:	f000 faab 	bl	80011cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000180 	.word	0x20000180

08000c80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000c84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c88:	f000 fd2a 	bl	80016e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb8:	f7ff ffea 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	; (8000cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <LoopForever+0xe>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	; (8000d00 <LoopForever+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f003 fb0d 	bl	8004300 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce6:	f7ff fbef 	bl	80004c8 <main>

08000cea <LoopForever>:

LoopForever:
    b LoopForever
 8000cea:	e7fe      	b.n	8000cea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000cf8:	080043b8 	.word	0x080043b8
  ldr r2, =_sbss
 8000cfc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d00:	200001cc 	.word	0x200001cc

08000d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC1_2_IRQHandler>

08000d06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f961 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d16:	200f      	movs	r0, #15
 8000d18:	f000 f80e 	bl	8000d38 <HAL_InitTick>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d002      	beq.n	8000d28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	71fb      	strb	r3, [r7, #7]
 8000d26:	e001      	b.n	8000d2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d28:	f7ff fe24 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_InitTick+0x6c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d023      	beq.n	8000d94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_InitTick+0x70>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_InitTick+0x6c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f96d 	bl	8001042 <HAL_SYSTICK_Config>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10f      	bne.n	8000d8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d809      	bhi.n	8000d88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f937 	bl	8000fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_InitTick+0x74>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e007      	b.n	8000d98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e004      	b.n	8000d98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e001      	b.n	8000d98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000000c 	.word	0x2000000c
 8000da8:	20000004 	.word	0x20000004
 8000dac:	20000008 	.word	0x20000008

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	2000000c 	.word	0x2000000c
 8000dd4:	200001c8 	.word	0x200001c8

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	200001c8 	.word	0x200001c8

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff ffee 	bl	8000dd8 <HAL_GetTick>
 8000dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d005      	beq.n	8000e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_Delay+0x44>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e16:	bf00      	nop
 8000e18:	f7ff ffde 	bl	8000dd8 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f7      	bhi.n	8000e18 <HAL_Delay+0x28>
  {
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2000000c 	.word	0x2000000c

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db0b      	blt.n	8000ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f003 021f 	and.w	r2, r3, #31
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <__NVIC_EnableIRQ+0x38>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	095b      	lsrs	r3, r3, #5
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff29 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff3e 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff8e 	bl	8000f2c <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff31 	bl	8000e9c <__NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffa2 	bl	8000f94 <SysTick_Config>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e098      	b.n	80011a0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	4b4d      	ldr	r3, [pc, #308]	; (80011ac <HAL_DMA_Init+0x150>)
 8001076:	429a      	cmp	r2, r3
 8001078:	d80f      	bhi.n	800109a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	4b4b      	ldr	r3, [pc, #300]	; (80011b0 <HAL_DMA_Init+0x154>)
 8001082:	4413      	add	r3, r2
 8001084:	4a4b      	ldr	r2, [pc, #300]	; (80011b4 <HAL_DMA_Init+0x158>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	091b      	lsrs	r3, r3, #4
 800108c:	009a      	lsls	r2, r3, #2
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a48      	ldr	r2, [pc, #288]	; (80011b8 <HAL_DMA_Init+0x15c>)
 8001096:	641a      	str	r2, [r3, #64]	; 0x40
 8001098:	e00e      	b.n	80010b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	4b46      	ldr	r3, [pc, #280]	; (80011bc <HAL_DMA_Init+0x160>)
 80010a2:	4413      	add	r3, r2
 80010a4:	4a43      	ldr	r2, [pc, #268]	; (80011b4 <HAL_DMA_Init+0x158>)
 80010a6:	fba2 2303 	umull	r2, r3, r2, r3
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	009a      	lsls	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a42      	ldr	r2, [pc, #264]	; (80011c0 <HAL_DMA_Init+0x164>)
 80010b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2202      	movs	r2, #2
 80010bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80010ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80010dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001112:	d039      	beq.n	8001188 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a27      	ldr	r2, [pc, #156]	; (80011b8 <HAL_DMA_Init+0x15c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d11a      	bne.n	8001154 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800111e:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <HAL_DMA_Init+0x168>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f003 031c 	and.w	r3, r3, #28
 800112a:	210f      	movs	r1, #15
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	4924      	ldr	r1, [pc, #144]	; (80011c4 <HAL_DMA_Init+0x168>)
 8001134:	4013      	ands	r3, r2
 8001136:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <HAL_DMA_Init+0x168>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6859      	ldr	r1, [r3, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001144:	f003 031c 	and.w	r3, r3, #28
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	491d      	ldr	r1, [pc, #116]	; (80011c4 <HAL_DMA_Init+0x168>)
 800114e:	4313      	orrs	r3, r2
 8001150:	600b      	str	r3, [r1, #0]
 8001152:	e019      	b.n	8001188 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_DMA_Init+0x16c>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115c:	f003 031c 	and.w	r3, r3, #28
 8001160:	210f      	movs	r1, #15
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	4917      	ldr	r1, [pc, #92]	; (80011c8 <HAL_DMA_Init+0x16c>)
 800116a:	4013      	ands	r3, r2
 800116c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_DMA_Init+0x16c>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6859      	ldr	r1, [r3, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f003 031c 	and.w	r3, r3, #28
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	4911      	ldr	r1, [pc, #68]	; (80011c8 <HAL_DMA_Init+0x16c>)
 8001184:	4313      	orrs	r3, r2
 8001186:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	40020407 	.word	0x40020407
 80011b0:	bffdfff8 	.word	0xbffdfff8
 80011b4:	cccccccd 	.word	0xcccccccd
 80011b8:	40020000 	.word	0x40020000
 80011bc:	bffdfbf8 	.word	0xbffdfbf8
 80011c0:	40020400 	.word	0x40020400
 80011c4:	400200a8 	.word	0x400200a8
 80011c8:	400204a8 	.word	0x400204a8

080011cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	f003 031c 	and.w	r3, r3, #28
 80011ec:	2204      	movs	r2, #4
 80011ee:	409a      	lsls	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d026      	beq.n	8001246 <HAL_DMA_IRQHandler+0x7a>
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d021      	beq.n	8001246 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0320 	and.w	r3, r3, #32
 800120c:	2b00      	cmp	r3, #0
 800120e:	d107      	bne.n	8001220 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0204 	bic.w	r2, r2, #4
 800121e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001224:	f003 021c 	and.w	r2, r3, #28
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	2104      	movs	r1, #4
 800122e:	fa01 f202 	lsl.w	r2, r1, r2
 8001232:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	2b00      	cmp	r3, #0
 800123a:	d071      	beq.n	8001320 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001244:	e06c      	b.n	8001320 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f003 031c 	and.w	r3, r3, #28
 800124e:	2202      	movs	r2, #2
 8001250:	409a      	lsls	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4013      	ands	r3, r2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d02e      	beq.n	80012b8 <HAL_DMA_IRQHandler+0xec>
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d029      	beq.n	80012b8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0320 	and.w	r3, r3, #32
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10b      	bne.n	800128a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 020a 	bic.w	r2, r2, #10
 8001280:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f003 021c 	and.w	r2, r3, #28
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	2102      	movs	r1, #2
 8001298:	fa01 f202 	lsl.w	r2, r1, r2
 800129c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d038      	beq.n	8001320 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80012b6:	e033      	b.n	8001320 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012bc:	f003 031c 	and.w	r3, r3, #28
 80012c0:	2208      	movs	r2, #8
 80012c2:	409a      	lsls	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d02a      	beq.n	8001322 <HAL_DMA_IRQHandler+0x156>
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d025      	beq.n	8001322 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f003 021c 	and.w	r2, r3, #28
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	2101      	movs	r1, #1
 80012f4:	fa01 f202 	lsl.w	r2, r1, r2
 80012f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001314:	2b00      	cmp	r3, #0
 8001316:	d004      	beq.n	8001322 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001320:	bf00      	nop
 8001322:	bf00      	nop
}
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133a:	e17f      	b.n	800163c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 8171 	beq.w	8001636 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b01      	cmp	r3, #1
 800135e:	d005      	beq.n	800136c <HAL_GPIO_Init+0x40>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d130      	bne.n	80013ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013a2:	2201      	movs	r2, #1
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	091b      	lsrs	r3, r3, #4
 80013b8:	f003 0201 	and.w	r2, r3, #1
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d118      	bne.n	800140c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013e0:	2201      	movs	r2, #1
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	f003 0201 	and.w	r2, r3, #1
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b03      	cmp	r3, #3
 8001416:	d017      	beq.n	8001448 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d123      	bne.n	800149c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	08da      	lsrs	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3208      	adds	r2, #8
 800145c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	220f      	movs	r2, #15
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	08da      	lsrs	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3208      	adds	r2, #8
 8001496:	6939      	ldr	r1, [r7, #16]
 8001498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0203 	and.w	r2, r3, #3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 80ac 	beq.w	8001636 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	4b5f      	ldr	r3, [pc, #380]	; (800165c <HAL_GPIO_Init+0x330>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e2:	4a5e      	ldr	r2, [pc, #376]	; (800165c <HAL_GPIO_Init+0x330>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6613      	str	r3, [r2, #96]	; 0x60
 80014ea:	4b5c      	ldr	r3, [pc, #368]	; (800165c <HAL_GPIO_Init+0x330>)
 80014ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014f6:	4a5a      	ldr	r2, [pc, #360]	; (8001660 <HAL_GPIO_Init+0x334>)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3302      	adds	r3, #2
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220f      	movs	r2, #15
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001520:	d025      	beq.n	800156e <HAL_GPIO_Init+0x242>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4f      	ldr	r2, [pc, #316]	; (8001664 <HAL_GPIO_Init+0x338>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d01f      	beq.n	800156a <HAL_GPIO_Init+0x23e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4e      	ldr	r2, [pc, #312]	; (8001668 <HAL_GPIO_Init+0x33c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d019      	beq.n	8001566 <HAL_GPIO_Init+0x23a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4d      	ldr	r2, [pc, #308]	; (800166c <HAL_GPIO_Init+0x340>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0x236>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4c      	ldr	r2, [pc, #304]	; (8001670 <HAL_GPIO_Init+0x344>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d00d      	beq.n	800155e <HAL_GPIO_Init+0x232>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4b      	ldr	r2, [pc, #300]	; (8001674 <HAL_GPIO_Init+0x348>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d007      	beq.n	800155a <HAL_GPIO_Init+0x22e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <HAL_GPIO_Init+0x34c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_GPIO_Init+0x22a>
 8001552:	2306      	movs	r3, #6
 8001554:	e00c      	b.n	8001570 <HAL_GPIO_Init+0x244>
 8001556:	2307      	movs	r3, #7
 8001558:	e00a      	b.n	8001570 <HAL_GPIO_Init+0x244>
 800155a:	2305      	movs	r3, #5
 800155c:	e008      	b.n	8001570 <HAL_GPIO_Init+0x244>
 800155e:	2304      	movs	r3, #4
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x244>
 8001562:	2303      	movs	r3, #3
 8001564:	e004      	b.n	8001570 <HAL_GPIO_Init+0x244>
 8001566:	2302      	movs	r3, #2
 8001568:	e002      	b.n	8001570 <HAL_GPIO_Init+0x244>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_GPIO_Init+0x244>
 800156e:	2300      	movs	r3, #0
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	f002 0203 	and.w	r2, r2, #3
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	4093      	lsls	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001580:	4937      	ldr	r1, [pc, #220]	; (8001660 <HAL_GPIO_Init+0x334>)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3302      	adds	r3, #2
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800158e:	4b3b      	ldr	r3, [pc, #236]	; (800167c <HAL_GPIO_Init+0x350>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	43db      	mvns	r3, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015b2:	4a32      	ldr	r2, [pc, #200]	; (800167c <HAL_GPIO_Init+0x350>)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015b8:	4b30      	ldr	r3, [pc, #192]	; (800167c <HAL_GPIO_Init+0x350>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015dc:	4a27      	ldr	r2, [pc, #156]	; (800167c <HAL_GPIO_Init+0x350>)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015e2:	4b26      	ldr	r3, [pc, #152]	; (800167c <HAL_GPIO_Init+0x350>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001606:	4a1d      	ldr	r2, [pc, #116]	; (800167c <HAL_GPIO_Init+0x350>)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <HAL_GPIO_Init+0x350>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001630:	4a12      	ldr	r2, [pc, #72]	; (800167c <HAL_GPIO_Init+0x350>)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa22 f303 	lsr.w	r3, r2, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	f47f ae78 	bne.w	800133c <HAL_GPIO_Init+0x10>
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	371c      	adds	r7, #28
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	40010000 	.word	0x40010000
 8001664:	48000400 	.word	0x48000400
 8001668:	48000800 	.word	0x48000800
 800166c:	48000c00 	.word	0x48000c00
 8001670:	48001000 	.word	0x48001000
 8001674:	48001400 	.word	0x48001400
 8001678:	48001800 	.word	0x48001800
 800167c:	40010400 	.word	0x40010400

08001680 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	887b      	ldrh	r3, [r7, #2]
 8001692:	4013      	ands	r3, r2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e001      	b.n	80016a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d006      	beq.n	8001704 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe fed6 	bl	80004b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40010400 	.word	0x40010400

08001710 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <HAL_PWREx_GetVoltageRange+0x18>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40007000 	.word	0x40007000

0800172c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800173a:	d130      	bne.n	800179e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800173c:	4b23      	ldr	r3, [pc, #140]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001748:	d038      	beq.n	80017bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001752:	4a1e      	ldr	r2, [pc, #120]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001758:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2232      	movs	r2, #50	; 0x32
 8001760:	fb02 f303 	mul.w	r3, r2, r3
 8001764:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	0c9b      	lsrs	r3, r3, #18
 800176c:	3301      	adds	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001770:	e002      	b.n	8001778 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3b01      	subs	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001784:	d102      	bne.n	800178c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f2      	bne.n	8001772 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001798:	d110      	bne.n	80017bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e00f      	b.n	80017be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017aa:	d007      	beq.n	80017bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017b4:	4a05      	ldr	r2, [pc, #20]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40007000 	.word	0x40007000
 80017d0:	20000004 	.word	0x20000004
 80017d4:	431bde83 	.word	0x431bde83

080017d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e3c6      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ea:	4ba1      	ldr	r3, [pc, #644]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017f4:	4b9e      	ldr	r3, [pc, #632]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 80e4 	beq.w	80019d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <HAL_RCC_OscConfig+0x4a>
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	2b0c      	cmp	r3, #12
 8001816:	f040 808b 	bne.w	8001930 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b01      	cmp	r3, #1
 800181e:	f040 8087 	bne.w	8001930 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001822:	4b93      	ldr	r3, [pc, #588]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d005      	beq.n	800183a <HAL_RCC_OscConfig+0x62>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e39e      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1a      	ldr	r2, [r3, #32]
 800183e:	4b8c      	ldr	r3, [pc, #560]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d004      	beq.n	8001854 <HAL_RCC_OscConfig+0x7c>
 800184a:	4b89      	ldr	r3, [pc, #548]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001852:	e005      	b.n	8001860 <HAL_RCC_OscConfig+0x88>
 8001854:	4b86      	ldr	r3, [pc, #536]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001860:	4293      	cmp	r3, r2
 8001862:	d223      	bcs.n	80018ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4618      	mov	r0, r3
 800186a:	f000 fd1b 	bl	80022a4 <RCC_SetFlashLatencyFromMSIRange>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e37f      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001878:	4b7d      	ldr	r3, [pc, #500]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a7c      	ldr	r2, [pc, #496]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 800187e:	f043 0308 	orr.w	r3, r3, #8
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b7a      	ldr	r3, [pc, #488]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4977      	ldr	r1, [pc, #476]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001896:	4b76      	ldr	r3, [pc, #472]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	4972      	ldr	r1, [pc, #456]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	604b      	str	r3, [r1, #4]
 80018aa:	e025      	b.n	80018f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ac:	4b70      	ldr	r3, [pc, #448]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a6f      	ldr	r2, [pc, #444]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 80018b2:	f043 0308 	orr.w	r3, r3, #8
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b6d      	ldr	r3, [pc, #436]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	496a      	ldr	r1, [pc, #424]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ca:	4b69      	ldr	r3, [pc, #420]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	4965      	ldr	r1, [pc, #404]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d109      	bne.n	80018f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fcdb 	bl	80022a4 <RCC_SetFlashLatencyFromMSIRange>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e33f      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018f8:	f000 fc48 	bl	800218c <HAL_RCC_GetSysClockFreq>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b5c      	ldr	r3, [pc, #368]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	f003 030f 	and.w	r3, r3, #15
 8001908:	495a      	ldr	r1, [pc, #360]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
 8001914:	4a58      	ldr	r2, [pc, #352]	; (8001a78 <HAL_RCC_OscConfig+0x2a0>)
 8001916:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001918:	4b58      	ldr	r3, [pc, #352]	; (8001a7c <HAL_RCC_OscConfig+0x2a4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fa0b 	bl	8000d38 <HAL_InitTick>
 8001922:	4603      	mov	r3, r0
 8001924:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d052      	beq.n	80019d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	e323      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d032      	beq.n	800199e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001938:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a4c      	ldr	r2, [pc, #304]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001944:	f7ff fa48 	bl	8000dd8 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800194c:	f7ff fa44 	bl	8000dd8 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e30c      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800195e:	4b44      	ldr	r3, [pc, #272]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800196a:	4b41      	ldr	r3, [pc, #260]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a40      	ldr	r2, [pc, #256]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001970:	f043 0308 	orr.w	r3, r3, #8
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b3e      	ldr	r3, [pc, #248]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	493b      	ldr	r1, [pc, #236]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	4936      	ldr	r1, [pc, #216]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
 800199c:	e01a      	b.n	80019d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800199e:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a33      	ldr	r2, [pc, #204]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019aa:	f7ff fa15 	bl	8000dd8 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019b2:	f7ff fa11 	bl	8000dd8 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e2d9      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f0      	bne.n	80019b2 <HAL_RCC_OscConfig+0x1da>
 80019d0:	e000      	b.n	80019d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d074      	beq.n	8001aca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d005      	beq.n	80019f2 <HAL_RCC_OscConfig+0x21a>
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	2b0c      	cmp	r3, #12
 80019ea:	d10e      	bne.n	8001a0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d10b      	bne.n	8001a0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f2:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d064      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x2f0>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d160      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e2b6      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a12:	d106      	bne.n	8001a22 <HAL_RCC_OscConfig+0x24a>
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a15      	ldr	r2, [pc, #84]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	e01d      	b.n	8001a5e <HAL_RCC_OscConfig+0x286>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a2a:	d10c      	bne.n	8001a46 <HAL_RCC_OscConfig+0x26e>
 8001a2c:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001a32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0c      	ldr	r2, [pc, #48]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	e00b      	b.n	8001a5e <HAL_RCC_OscConfig+0x286>
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <HAL_RCC_OscConfig+0x298>)
 8001a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d01c      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a66:	f7ff f9b7 	bl	8000dd8 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6c:	e011      	b.n	8001a92 <HAL_RCC_OscConfig+0x2ba>
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	08004370 	.word	0x08004370
 8001a78:	20000004 	.word	0x20000004
 8001a7c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff f9aa 	bl	8000dd8 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e272      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a92:	4baf      	ldr	r3, [pc, #700]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x2a8>
 8001a9e:	e014      	b.n	8001aca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f99a 	bl	8000dd8 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff f996 	bl	8000dd8 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e25e      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aba:	4ba5      	ldr	r3, [pc, #660]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x2d0>
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d060      	beq.n	8001b98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x310>
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d119      	bne.n	8001b16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d116      	bne.n	8001b16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae8:	4b99      	ldr	r3, [pc, #612]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_OscConfig+0x328>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e23b      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b00:	4b93      	ldr	r3, [pc, #588]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	061b      	lsls	r3, r3, #24
 8001b0e:	4990      	ldr	r1, [pc, #576]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b14:	e040      	b.n	8001b98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d023      	beq.n	8001b66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1e:	4b8c      	ldr	r3, [pc, #560]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a8b      	ldr	r2, [pc, #556]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7ff f955 	bl	8000dd8 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b32:	f7ff f951 	bl	8000dd8 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e219      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b44:	4b82      	ldr	r3, [pc, #520]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4b7f      	ldr	r3, [pc, #508]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	061b      	lsls	r3, r3, #24
 8001b5e:	497c      	ldr	r1, [pc, #496]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
 8001b64:	e018      	b.n	8001b98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b66:	4b7a      	ldr	r3, [pc, #488]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a79      	ldr	r2, [pc, #484]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7ff f931 	bl	8000dd8 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7a:	f7ff f92d 	bl	8000dd8 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f5      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b8c:	4b70      	ldr	r3, [pc, #448]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d03c      	beq.n	8001c1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d01c      	beq.n	8001be6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bac:	4b68      	ldr	r3, [pc, #416]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb2:	4a67      	ldr	r2, [pc, #412]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7ff f90c 	bl	8000dd8 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc4:	f7ff f908 	bl	8000dd8 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e1d0      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bd6:	4b5e      	ldr	r3, [pc, #376]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0ef      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x3ec>
 8001be4:	e01b      	b.n	8001c1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be6:	4b5a      	ldr	r3, [pc, #360]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bec:	4a58      	ldr	r2, [pc, #352]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf6:	f7ff f8ef 	bl	8000dd8 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfe:	f7ff f8eb 	bl	8000dd8 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e1b3      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c10:	4b4f      	ldr	r3, [pc, #316]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1ef      	bne.n	8001bfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 80a6 	beq.w	8001d78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c30:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10d      	bne.n	8001c58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3c:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	4a43      	ldr	r2, [pc, #268]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c46:	6593      	str	r3, [r2, #88]	; 0x58
 8001c48:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c54:	2301      	movs	r3, #1
 8001c56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c58:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <HAL_RCC_OscConfig+0x57c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d118      	bne.n	8001c96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c64:	4b3b      	ldr	r3, [pc, #236]	; (8001d54 <HAL_RCC_OscConfig+0x57c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a3a      	ldr	r2, [pc, #232]	; (8001d54 <HAL_RCC_OscConfig+0x57c>)
 8001c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c70:	f7ff f8b2 	bl	8000dd8 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c78:	f7ff f8ae 	bl	8000dd8 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e176      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c8a:	4b32      	ldr	r3, [pc, #200]	; (8001d54 <HAL_RCC_OscConfig+0x57c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d108      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x4d8>
 8001c9e:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca4:	4a2a      	ldr	r2, [pc, #168]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cae:	e024      	b.n	8001cfa <HAL_RCC_OscConfig+0x522>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b05      	cmp	r3, #5
 8001cb6:	d110      	bne.n	8001cda <HAL_RCC_OscConfig+0x502>
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbe:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cce:	4a20      	ldr	r2, [pc, #128]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cd8:	e00f      	b.n	8001cfa <HAL_RCC_OscConfig+0x522>
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce0:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001ce2:	f023 0301 	bic.w	r3, r3, #1
 8001ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001cf2:	f023 0304 	bic.w	r3, r3, #4
 8001cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d016      	beq.n	8001d30 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d02:	f7ff f869 	bl	8000dd8 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7ff f865 	bl	8000dd8 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e12b      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCC_OscConfig+0x578>)
 8001d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0ed      	beq.n	8001d0a <HAL_RCC_OscConfig+0x532>
 8001d2e:	e01a      	b.n	8001d66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7ff f852 	bl	8000dd8 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d36:	e00f      	b.n	8001d58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d38:	f7ff f84e 	bl	8000dd8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d906      	bls.n	8001d58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e114      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d58:	4b89      	ldr	r3, [pc, #548]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1e8      	bne.n	8001d38 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d66:	7ffb      	ldrb	r3, [r7, #31]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d105      	bne.n	8001d78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6c:	4b84      	ldr	r3, [pc, #528]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	4a83      	ldr	r2, [pc, #524]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80fa 	beq.w	8001f76 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	f040 80d0 	bne.w	8001f2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d8c:	4b7c      	ldr	r3, [pc, #496]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f003 0203 	and.w	r2, r3, #3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d130      	bne.n	8001e02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	3b01      	subs	r3, #1
 8001dac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d127      	bne.n	8001e02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d11f      	bne.n	8001e02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dcc:	2a07      	cmp	r2, #7
 8001dce:	bf14      	ite	ne
 8001dd0:	2201      	movne	r2, #1
 8001dd2:	2200      	moveq	r2, #0
 8001dd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d113      	bne.n	8001e02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de4:	085b      	lsrs	r3, r3, #1
 8001de6:	3b01      	subs	r3, #1
 8001de8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d109      	bne.n	8001e02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	085b      	lsrs	r3, r3, #1
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d06e      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b0c      	cmp	r3, #12
 8001e06:	d069      	beq.n	8001edc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e08:	4b5d      	ldr	r3, [pc, #372]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d105      	bne.n	8001e20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e14:	4b5a      	ldr	r3, [pc, #360]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0a9      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e24:	4b56      	ldr	r3, [pc, #344]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a55      	ldr	r2, [pc, #340]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e30:	f7fe ffd2 	bl	8000dd8 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7fe ffce 	bl	8000dd8 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e096      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e4a:	4b4d      	ldr	r3, [pc, #308]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e56:	4b4a      	ldr	r3, [pc, #296]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	4b4a      	ldr	r3, [pc, #296]	; (8001f84 <HAL_RCC_OscConfig+0x7ac>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e66:	3a01      	subs	r2, #1
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	4311      	orrs	r1, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e70:	0212      	lsls	r2, r2, #8
 8001e72:	4311      	orrs	r1, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e78:	0852      	lsrs	r2, r2, #1
 8001e7a:	3a01      	subs	r2, #1
 8001e7c:	0552      	lsls	r2, r2, #21
 8001e7e:	4311      	orrs	r1, r2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e84:	0852      	lsrs	r2, r2, #1
 8001e86:	3a01      	subs	r2, #1
 8001e88:	0652      	lsls	r2, r2, #25
 8001e8a:	4311      	orrs	r1, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e90:	0912      	lsrs	r2, r2, #4
 8001e92:	0452      	lsls	r2, r2, #17
 8001e94:	430a      	orrs	r2, r1
 8001e96:	493a      	ldr	r1, [pc, #232]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e9c:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a37      	ldr	r2, [pc, #220]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ea8:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4a34      	ldr	r2, [pc, #208]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eb4:	f7fe ff90 	bl	8000dd8 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7fe ff8c 	bl	8000dd8 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e054      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ece:	4b2c      	ldr	r3, [pc, #176]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eda:	e04c      	b.n	8001f76 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e04b      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee0:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d144      	bne.n	8001f76 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001eec:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a23      	ldr	r2, [pc, #140]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ef8:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4a20      	ldr	r2, [pc, #128]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f04:	f7fe ff68 	bl	8000dd8 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7fe ff64 	bl	8000dd8 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e02c      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x734>
 8001f2a:	e024      	b.n	8001f76 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d01f      	beq.n	8001f72 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f32:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001f38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7fe ff4b 	bl	8000dd8 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f46:	f7fe ff47 	bl	8000dd8 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e00f      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	4905      	ldr	r1, [pc, #20]	; (8001f80 <HAL_RCC_OscConfig+0x7a8>)
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_RCC_OscConfig+0x7b0>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60cb      	str	r3, [r1, #12]
 8001f70:	e001      	b.n	8001f76 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	f99d808c 	.word	0xf99d808c
 8001f88:	feeefffc 	.word	0xfeeefffc

08001f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0e7      	b.n	8002170 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b75      	ldr	r3, [pc, #468]	; (8002178 <HAL_RCC_ClockConfig+0x1ec>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d910      	bls.n	8001fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b72      	ldr	r3, [pc, #456]	; (8002178 <HAL_RCC_ClockConfig+0x1ec>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 0207 	bic.w	r2, r3, #7
 8001fb6:	4970      	ldr	r1, [pc, #448]	; (8002178 <HAL_RCC_ClockConfig+0x1ec>)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	4b6e      	ldr	r3, [pc, #440]	; (8002178 <HAL_RCC_ClockConfig+0x1ec>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0cf      	b.n	8002170 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d010      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	4b66      	ldr	r3, [pc, #408]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d908      	bls.n	8001ffe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fec:	4b63      	ldr	r3, [pc, #396]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4960      	ldr	r1, [pc, #384]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d04c      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b03      	cmp	r3, #3
 8002010:	d107      	bne.n	8002022 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002012:	4b5a      	ldr	r3, [pc, #360]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d121      	bne.n	8002062 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e0a6      	b.n	8002170 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800202a:	4b54      	ldr	r3, [pc, #336]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d115      	bne.n	8002062 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e09a      	b.n	8002170 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002042:	4b4e      	ldr	r3, [pc, #312]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e08e      	b.n	8002170 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002052:	4b4a      	ldr	r3, [pc, #296]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e086      	b.n	8002170 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002062:	4b46      	ldr	r3, [pc, #280]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 0203 	bic.w	r2, r3, #3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4943      	ldr	r1, [pc, #268]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	4313      	orrs	r3, r2
 8002072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002074:	f7fe feb0 	bl	8000dd8 <HAL_GetTick>
 8002078:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	e00a      	b.n	8002092 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207c:	f7fe feac 	bl	8000dd8 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	; 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e06e      	b.n	8002170 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	4b3a      	ldr	r3, [pc, #232]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 020c 	and.w	r2, r3, #12
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d1eb      	bne.n	800207c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d010      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	4b31      	ldr	r3, [pc, #196]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020bc:	429a      	cmp	r2, r3
 80020be:	d208      	bcs.n	80020d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b2e      	ldr	r3, [pc, #184]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	492b      	ldr	r1, [pc, #172]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d2:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_RCC_ClockConfig+0x1ec>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d210      	bcs.n	8002102 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <HAL_RCC_ClockConfig+0x1ec>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 0207 	bic.w	r2, r3, #7
 80020e8:	4923      	ldr	r1, [pc, #140]	; (8002178 <HAL_RCC_ClockConfig+0x1ec>)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f0:	4b21      	ldr	r3, [pc, #132]	; (8002178 <HAL_RCC_ClockConfig+0x1ec>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e036      	b.n	8002170 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800210e:	4b1b      	ldr	r3, [pc, #108]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	4918      	ldr	r1, [pc, #96]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 800211c:	4313      	orrs	r3, r2
 800211e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d009      	beq.n	8002140 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4910      	ldr	r1, [pc, #64]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 800213c:	4313      	orrs	r3, r2
 800213e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002140:	f000 f824 	bl	800218c <HAL_RCC_GetSysClockFreq>
 8002144:	4602      	mov	r2, r0
 8002146:	4b0d      	ldr	r3, [pc, #52]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	490b      	ldr	r1, [pc, #44]	; (8002180 <HAL_RCC_ClockConfig+0x1f4>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
 800215c:	4a09      	ldr	r2, [pc, #36]	; (8002184 <HAL_RCC_ClockConfig+0x1f8>)
 800215e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_RCC_ClockConfig+0x1fc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fde7 	bl	8000d38 <HAL_InitTick>
 800216a:	4603      	mov	r3, r0
 800216c:	72fb      	strb	r3, [r7, #11]

  return status;
 800216e:	7afb      	ldrb	r3, [r7, #11]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40022000 	.word	0x40022000
 800217c:	40021000 	.word	0x40021000
 8002180:	08004370 	.word	0x08004370
 8002184:	20000004 	.word	0x20000004
 8002188:	20000008 	.word	0x20000008

0800218c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	; 0x24
 8002190:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800219a:	4b3e      	ldr	r3, [pc, #248]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a4:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x34>
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d121      	bne.n	80021fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d11e      	bne.n	80021fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021c0:	4b34      	ldr	r3, [pc, #208]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021cc:	4b31      	ldr	r3, [pc, #196]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	e005      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021dc:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021e8:	4a2b      	ldr	r2, [pc, #172]	; (8002298 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10d      	bne.n	8002214 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	2b04      	cmp	r3, #4
 8002202:	d102      	bne.n	800220a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002204:	4b25      	ldr	r3, [pc, #148]	; (800229c <HAL_RCC_GetSysClockFreq+0x110>)
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	e004      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b08      	cmp	r3, #8
 800220e:	d101      	bne.n	8002214 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002210:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002212:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	2b0c      	cmp	r3, #12
 8002218:	d134      	bne.n	8002284 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d003      	beq.n	8002232 <HAL_RCC_GetSysClockFreq+0xa6>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b03      	cmp	r3, #3
 800222e:	d003      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0xac>
 8002230:	e005      	b.n	800223e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_RCC_GetSysClockFreq+0x110>)
 8002234:	617b      	str	r3, [r7, #20]
      break;
 8002236:	e005      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800223a:	617b      	str	r3, [r7, #20]
      break;
 800223c:	e002      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	617b      	str	r3, [r7, #20]
      break;
 8002242:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	3301      	adds	r3, #1
 8002250:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	fb02 f203 	mul.w	r2, r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	fbb2 f3f3 	udiv	r3, r2, r3
 8002268:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	0e5b      	lsrs	r3, r3, #25
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	3301      	adds	r3, #1
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002284:	69bb      	ldr	r3, [r7, #24]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3724      	adds	r7, #36	; 0x24
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	08004380 	.word	0x08004380
 800229c:	00f42400 	.word	0x00f42400
 80022a0:	007a1200 	.word	0x007a1200

080022a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022ac:	2300      	movs	r3, #0
 80022ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022b0:	4b2a      	ldr	r3, [pc, #168]	; (800235c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022bc:	f7ff fa28 	bl	8001710 <HAL_PWREx_GetVoltageRange>
 80022c0:	6178      	str	r0, [r7, #20]
 80022c2:	e014      	b.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022c4:	4b25      	ldr	r3, [pc, #148]	; (800235c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c8:	4a24      	ldr	r2, [pc, #144]	; (800235c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ce:	6593      	str	r3, [r2, #88]	; 0x58
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022dc:	f7ff fa18 	bl	8001710 <HAL_PWREx_GetVoltageRange>
 80022e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022e2:	4b1e      	ldr	r3, [pc, #120]	; (800235c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e6:	4a1d      	ldr	r2, [pc, #116]	; (800235c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022f4:	d10b      	bne.n	800230e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b80      	cmp	r3, #128	; 0x80
 80022fa:	d919      	bls.n	8002330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2ba0      	cmp	r3, #160	; 0xa0
 8002300:	d902      	bls.n	8002308 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002302:	2302      	movs	r3, #2
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	e013      	b.n	8002330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002308:	2301      	movs	r3, #1
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	e010      	b.n	8002330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b80      	cmp	r3, #128	; 0x80
 8002312:	d902      	bls.n	800231a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002314:	2303      	movs	r3, #3
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	e00a      	b.n	8002330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b80      	cmp	r3, #128	; 0x80
 800231e:	d102      	bne.n	8002326 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002320:	2302      	movs	r3, #2
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	e004      	b.n	8002330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b70      	cmp	r3, #112	; 0x70
 800232a:	d101      	bne.n	8002330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800232c:	2301      	movs	r3, #1
 800232e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 0207 	bic.w	r2, r3, #7
 8002338:	4909      	ldr	r1, [pc, #36]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	429a      	cmp	r2, r3
 800234c:	d001      	beq.n	8002352 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	40022000 	.word	0x40022000

08002364 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e095      	b.n	80024a2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	2b00      	cmp	r3, #0
 800237c:	d108      	bne.n	8002390 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002386:	d009      	beq.n	800239c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
 800238e:	e005      	b.n	800239c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe fb00 	bl	80009bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023dc:	d902      	bls.n	80023e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	e002      	b.n	80023ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80023f2:	d007      	beq.n	8002404 <HAL_SPI_Init+0xa0>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023fc:	d002      	beq.n	8002404 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002446:	ea42 0103 	orr.w	r1, r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	0c1b      	lsrs	r3, r3, #16
 8002460:	f003 0204 	and.w	r2, r3, #4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002480:	ea42 0103 	orr.w	r1, r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b088      	sub	sp, #32
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	603b      	str	r3, [r7, #0]
 80024b6:	4613      	mov	r3, r2
 80024b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_SPI_Transmit+0x22>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e158      	b.n	800277e <HAL_SPI_Transmit+0x2d4>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024d4:	f7fe fc80 	bl	8000dd8 <HAL_GetTick>
 80024d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d002      	beq.n	80024f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024ea:	2302      	movs	r3, #2
 80024ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024ee:	e13d      	b.n	800276c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_SPI_Transmit+0x52>
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002500:	e134      	b.n	800276c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2203      	movs	r2, #3
 8002506:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	88fa      	ldrh	r2, [r7, #6]
 800251a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	88fa      	ldrh	r2, [r7, #6]
 8002520:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800254c:	d10f      	bne.n	800256e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800255c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800256c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002578:	2b40      	cmp	r3, #64	; 0x40
 800257a:	d007      	beq.n	800258c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800258a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002594:	d94b      	bls.n	800262e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <HAL_SPI_Transmit+0xfa>
 800259e:	8afb      	ldrh	r3, [r7, #22]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d13e      	bne.n	8002622 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	881a      	ldrh	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b4:	1c9a      	adds	r2, r3, #2
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025c8:	e02b      	b.n	8002622 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d112      	bne.n	80025fe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	881a      	ldrh	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	1c9a      	adds	r2, r3, #2
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025fc:	e011      	b.n	8002622 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025fe:	f7fe fbeb 	bl	8000dd8 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d803      	bhi.n	8002616 <HAL_SPI_Transmit+0x16c>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d102      	bne.n	800261c <HAL_SPI_Transmit+0x172>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002620:	e0a4      	b.n	800276c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1ce      	bne.n	80025ca <HAL_SPI_Transmit+0x120>
 800262c:	e07c      	b.n	8002728 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_SPI_Transmit+0x192>
 8002636:	8afb      	ldrh	r3, [r7, #22]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d170      	bne.n	800271e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d912      	bls.n	800266c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	1c9a      	adds	r2, r3, #2
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b02      	subs	r3, #2
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	87da      	strh	r2, [r3, #62]	; 0x3e
 800266a:	e058      	b.n	800271e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	330c      	adds	r3, #12
 8002676:	7812      	ldrb	r2, [r2, #0]
 8002678:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002692:	e044      	b.n	800271e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d12b      	bne.n	80026fa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d912      	bls.n	80026d2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026bc:	1c9a      	adds	r2, r3, #2
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b02      	subs	r3, #2
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026d0:	e025      	b.n	800271e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	330c      	adds	r3, #12
 80026dc:	7812      	ldrb	r2, [r2, #0]
 80026de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026f8:	e011      	b.n	800271e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026fa:	f7fe fb6d 	bl	8000dd8 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d803      	bhi.n	8002712 <HAL_SPI_Transmit+0x268>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d102      	bne.n	8002718 <HAL_SPI_Transmit+0x26e>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800271c:	e026      	b.n	800276c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002722:	b29b      	uxth	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1b5      	bne.n	8002694 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	6839      	ldr	r1, [r7, #0]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 fce3 	bl	80030f8 <SPI_EndRxTxTransaction>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10a      	bne.n	800275c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	77fb      	strb	r3, [r7, #31]
 8002768:	e000      	b.n	800276c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800276a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800277c:	7ffb      	ldrb	r3, [r7, #31]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3720      	adds	r7, #32
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b088      	sub	sp, #32
 800278a:	af02      	add	r7, sp, #8
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	4613      	mov	r3, r2
 8002794:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027a2:	d112      	bne.n	80027ca <HAL_SPI_Receive+0x44>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10e      	bne.n	80027ca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2204      	movs	r2, #4
 80027b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80027b4:	88fa      	ldrh	r2, [r7, #6]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	4613      	mov	r3, r2
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f910 	bl	80029e6 <HAL_SPI_TransmitReceive>
 80027c6:	4603      	mov	r3, r0
 80027c8:	e109      	b.n	80029de <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_SPI_Receive+0x52>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e102      	b.n	80029de <HAL_SPI_Receive+0x258>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027e0:	f7fe fafa 	bl	8000dd8 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d002      	beq.n	80027f8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80027f2:	2302      	movs	r3, #2
 80027f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027f6:	e0e9      	b.n	80029cc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_SPI_Receive+0x7e>
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d102      	bne.n	800280a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002808:	e0e0      	b.n	80029cc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2204      	movs	r2, #4
 800280e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	88fa      	ldrh	r2, [r7, #6]
 8002822:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	88fa      	ldrh	r2, [r7, #6]
 800282a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002854:	d908      	bls.n	8002868 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	e007      	b.n	8002878 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002876:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002880:	d10f      	bne.n	80028a2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002890:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d007      	beq.n	80028c0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028c8:	d867      	bhi.n	800299a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028ca:	e030      	b.n	800292e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d117      	bne.n	800290a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f103 020c 	add.w	r2, r3, #12
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	7812      	ldrb	r2, [r2, #0]
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002908:	e011      	b.n	800292e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800290a:	f7fe fa65 	bl	8000dd8 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d803      	bhi.n	8002922 <HAL_SPI_Receive+0x19c>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d102      	bne.n	8002928 <HAL_SPI_Receive+0x1a2>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800292c:	e04e      	b.n	80029cc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1c8      	bne.n	80028cc <HAL_SPI_Receive+0x146>
 800293a:	e034      	b.n	80029a6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b01      	cmp	r3, #1
 8002948:	d115      	bne.n	8002976 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	b292      	uxth	r2, r2
 8002956:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	1c9a      	adds	r2, r3, #2
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002974:	e011      	b.n	800299a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002976:	f7fe fa2f 	bl	8000dd8 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d803      	bhi.n	800298e <HAL_SPI_Receive+0x208>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d102      	bne.n	8002994 <HAL_SPI_Receive+0x20e>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002998:	e018      	b.n	80029cc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1ca      	bne.n	800293c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	6839      	ldr	r1, [r7, #0]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fb4c 	bl	8003048 <SPI_EndRxTransaction>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	75fb      	strb	r3, [r7, #23]
 80029c8:	e000      	b.n	80029cc <HAL_SPI_Receive+0x246>
  }

error :
 80029ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b08a      	sub	sp, #40	; 0x28
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029f4:	2301      	movs	r3, #1
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x26>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e1fb      	b.n	8002e04 <HAL_SPI_TransmitReceive+0x41e>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a14:	f7fe f9e0 	bl	8000dd8 <HAL_GetTick>
 8002a18:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a20:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002a28:	887b      	ldrh	r3, [r7, #2]
 8002a2a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002a2c:	887b      	ldrh	r3, [r7, #2]
 8002a2e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a30:	7efb      	ldrb	r3, [r7, #27]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d00e      	beq.n	8002a54 <HAL_SPI_TransmitReceive+0x6e>
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a3c:	d106      	bne.n	8002a4c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HAL_SPI_TransmitReceive+0x66>
 8002a46:	7efb      	ldrb	r3, [r7, #27]
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d003      	beq.n	8002a54 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002a52:	e1cd      	b.n	8002df0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_SPI_TransmitReceive+0x80>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <HAL_SPI_TransmitReceive+0x80>
 8002a60:	887b      	ldrh	r3, [r7, #2]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d103      	bne.n	8002a6e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002a6c:	e1c0      	b.n	8002df0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d003      	beq.n	8002a82 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2205      	movs	r2, #5
 8002a7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	887a      	ldrh	r2, [r7, #2]
 8002a92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	887a      	ldrh	r2, [r7, #2]
 8002a9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	887a      	ldrh	r2, [r7, #2]
 8002aae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ac4:	d802      	bhi.n	8002acc <HAL_SPI_TransmitReceive+0xe6>
 8002ac6:	8a3b      	ldrh	r3, [r7, #16]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d908      	bls.n	8002ade <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	e007      	b.n	8002aee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002aec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af8:	2b40      	cmp	r3, #64	; 0x40
 8002afa:	d007      	beq.n	8002b0c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b14:	d97c      	bls.n	8002c10 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <HAL_SPI_TransmitReceive+0x13e>
 8002b1e:	8a7b      	ldrh	r3, [r7, #18]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d169      	bne.n	8002bf8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	881a      	ldrh	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b34:	1c9a      	adds	r2, r3, #2
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b48:	e056      	b.n	8002bf8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d11b      	bne.n	8002b90 <HAL_SPI_TransmitReceive+0x1aa>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d016      	beq.n	8002b90 <HAL_SPI_TransmitReceive+0x1aa>
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d113      	bne.n	8002b90 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	881a      	ldrh	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b78:	1c9a      	adds	r2, r3, #2
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d11c      	bne.n	8002bd8 <HAL_SPI_TransmitReceive+0x1f2>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d016      	beq.n	8002bd8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	b292      	uxth	r2, r2
 8002bb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	1c9a      	adds	r2, r3, #2
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bd8:	f7fe f8fe 	bl	8000dd8 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d807      	bhi.n	8002bf8 <HAL_SPI_TransmitReceive+0x212>
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bee:	d003      	beq.n	8002bf8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002bf6:	e0fb      	b.n	8002df0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1a3      	bne.n	8002b4a <HAL_SPI_TransmitReceive+0x164>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d19d      	bne.n	8002b4a <HAL_SPI_TransmitReceive+0x164>
 8002c0e:	e0df      	b.n	8002dd0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_SPI_TransmitReceive+0x23a>
 8002c18:	8a7b      	ldrh	r3, [r7, #18]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	f040 80cb 	bne.w	8002db6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d912      	bls.n	8002c50 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2e:	881a      	ldrh	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	1c9a      	adds	r2, r3, #2
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b02      	subs	r3, #2
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c4e:	e0b2      	b.n	8002db6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	7812      	ldrb	r2, [r2, #0]
 8002c5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c76:	e09e      	b.n	8002db6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d134      	bne.n	8002cf0 <HAL_SPI_TransmitReceive+0x30a>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d02f      	beq.n	8002cf0 <HAL_SPI_TransmitReceive+0x30a>
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d12c      	bne.n	8002cf0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d912      	bls.n	8002cc6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	881a      	ldrh	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb0:	1c9a      	adds	r2, r3, #2
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b02      	subs	r3, #2
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cc4:	e012      	b.n	8002cec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	330c      	adds	r3, #12
 8002cd0:	7812      	ldrb	r2, [r2, #0]
 8002cd2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d148      	bne.n	8002d90 <HAL_SPI_TransmitReceive+0x3aa>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d042      	beq.n	8002d90 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d923      	bls.n	8002d5e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	b292      	uxth	r2, r2
 8002d22:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	1c9a      	adds	r2, r3, #2
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b02      	subs	r3, #2
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d81f      	bhi.n	8002d8c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	e016      	b.n	8002d8c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f103 020c 	add.w	r2, r3, #12
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	7812      	ldrb	r2, [r2, #0]
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d90:	f7fe f822 	bl	8000dd8 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d803      	bhi.n	8002da8 <HAL_SPI_TransmitReceive+0x3c2>
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da6:	d102      	bne.n	8002dae <HAL_SPI_TransmitReceive+0x3c8>
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d103      	bne.n	8002db6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002db4:	e01c      	b.n	8002df0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f47f af5b 	bne.w	8002c78 <HAL_SPI_TransmitReceive+0x292>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f47f af54 	bne.w	8002c78 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f98f 	bl	80030f8 <SPI_EndRxTxTransaction>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d006      	beq.n	8002dee <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	661a      	str	r2, [r3, #96]	; 0x60
 8002dec:	e000      	b.n	8002df0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002dee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3728      	adds	r7, #40	; 0x28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e1c:	f7fd ffdc 	bl	8000dd8 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	4413      	add	r3, r2
 8002e2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e2c:	f7fd ffd4 	bl	8000dd8 <HAL_GetTick>
 8002e30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e32:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	015b      	lsls	r3, r3, #5
 8002e38:	0d1b      	lsrs	r3, r3, #20
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	fb02 f303 	mul.w	r3, r2, r3
 8002e40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e42:	e054      	b.n	8002eee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4a:	d050      	beq.n	8002eee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e4c:	f7fd ffc4 	bl	8000dd8 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d902      	bls.n	8002e62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d13d      	bne.n	8002ede <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e7a:	d111      	bne.n	8002ea0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e84:	d004      	beq.n	8002e90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8e:	d107      	bne.n	8002ea0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea8:	d10f      	bne.n	8002eca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ec8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e017      	b.n	8002f0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	bf0c      	ite	eq
 8002efe:	2301      	moveq	r3, #1
 8002f00:	2300      	movne	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d19b      	bne.n	8002e44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3720      	adds	r7, #32
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000004 	.word	0x20000004

08002f1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	; 0x28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f2e:	f7fd ff53 	bl	8000dd8 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002f3e:	f7fd ff4b 	bl	8000dd8 <HAL_GetTick>
 8002f42:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	330c      	adds	r3, #12
 8002f4a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f4c:	4b3d      	ldr	r3, [pc, #244]	; (8003044 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	00da      	lsls	r2, r3, #3
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	0d1b      	lsrs	r3, r3, #20
 8002f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5e:	fb02 f303 	mul.w	r3, r2, r3
 8002f62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f64:	e060      	b.n	8003028 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f6c:	d107      	bne.n	8002f7e <SPI_WaitFifoStateUntilTimeout+0x62>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d104      	bne.n	8002f7e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d050      	beq.n	8003028 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f86:	f7fd ff27 	bl	8000dd8 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d902      	bls.n	8002f9c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d13d      	bne.n	8003018 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002faa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fb4:	d111      	bne.n	8002fda <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fbe:	d004      	beq.n	8002fca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc8:	d107      	bne.n	8002fda <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe2:	d10f      	bne.n	8003004 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003002:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e010      	b.n	800303a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	3b01      	subs	r3, #1
 8003026:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	4013      	ands	r3, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	d196      	bne.n	8002f66 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3728      	adds	r7, #40	; 0x28
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000004 	.word	0x20000004

08003048 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af02      	add	r7, sp, #8
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800305c:	d111      	bne.n	8003082 <SPI_EndRxTransaction+0x3a>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003066:	d004      	beq.n	8003072 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003070:	d107      	bne.n	8003082 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003080:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2200      	movs	r2, #0
 800308a:	2180      	movs	r1, #128	; 0x80
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f7ff febd 	bl	8002e0c <SPI_WaitFlagStateUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800309c:	f043 0220 	orr.w	r2, r3, #32
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e023      	b.n	80030f0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030b0:	d11d      	bne.n	80030ee <SPI_EndRxTransaction+0xa6>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ba:	d004      	beq.n	80030c6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c4:	d113      	bne.n	80030ee <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f7ff ff22 	bl	8002f1c <SPI_WaitFifoStateUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e2:	f043 0220 	orr.w	r2, r3, #32
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e000      	b.n	80030f0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2200      	movs	r2, #0
 800310c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7ff ff03 	bl	8002f1c <SPI_WaitFifoStateUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d007      	beq.n	800312c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e027      	b.n	800317c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2200      	movs	r2, #0
 8003134:	2180      	movs	r1, #128	; 0x80
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f7ff fe68 	bl	8002e0c <SPI_WaitFlagStateUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d007      	beq.n	8003152 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003146:	f043 0220 	orr.w	r2, r3, #32
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e014      	b.n	800317c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2200      	movs	r2, #0
 800315a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f7ff fedc 	bl	8002f1c <SPI_WaitFifoStateUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d007      	beq.n	800317a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316e:	f043 0220 	orr.w	r2, r3, #32
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e000      	b.n	800317c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e049      	b.n	800322a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fd fcc4 	bl	8000b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3304      	adds	r3, #4
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f000 fbe4 	bl	8003990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d001      	beq.n	800324c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e047      	b.n	80032dc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a23      	ldr	r2, [pc, #140]	; (80032e8 <HAL_TIM_Base_Start+0xb4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d01d      	beq.n	800329a <HAL_TIM_Base_Start+0x66>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003266:	d018      	beq.n	800329a <HAL_TIM_Base_Start+0x66>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1f      	ldr	r2, [pc, #124]	; (80032ec <HAL_TIM_Base_Start+0xb8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d013      	beq.n	800329a <HAL_TIM_Base_Start+0x66>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1e      	ldr	r2, [pc, #120]	; (80032f0 <HAL_TIM_Base_Start+0xbc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00e      	beq.n	800329a <HAL_TIM_Base_Start+0x66>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1c      	ldr	r2, [pc, #112]	; (80032f4 <HAL_TIM_Base_Start+0xc0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d009      	beq.n	800329a <HAL_TIM_Base_Start+0x66>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1b      	ldr	r2, [pc, #108]	; (80032f8 <HAL_TIM_Base_Start+0xc4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d004      	beq.n	800329a <HAL_TIM_Base_Start+0x66>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a19      	ldr	r2, [pc, #100]	; (80032fc <HAL_TIM_Base_Start+0xc8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d115      	bne.n	80032c6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	4b17      	ldr	r3, [pc, #92]	; (8003300 <HAL_TIM_Base_Start+0xcc>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b06      	cmp	r3, #6
 80032aa:	d015      	beq.n	80032d8 <HAL_TIM_Base_Start+0xa4>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b2:	d011      	beq.n	80032d8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c4:	e008      	b.n	80032d8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0201 	orr.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e000      	b.n	80032da <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40000400 	.word	0x40000400
 80032f0:	40000800 	.word	0x40000800
 80032f4:	40000c00 	.word	0x40000c00
 80032f8:	40013400 	.word	0x40013400
 80032fc:	40014000 	.word	0x40014000
 8003300:	00010007 	.word	0x00010007

08003304 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e049      	b.n	80033aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f841 	bl	80033b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	4619      	mov	r1, r3
 8003342:	4610      	mov	r0, r2
 8003344:	f000 fb24 	bl	8003990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
	...

080033c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <HAL_TIM_PWM_Start+0x24>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	bf14      	ite	ne
 80033e4:	2301      	movne	r3, #1
 80033e6:	2300      	moveq	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	e03c      	b.n	8003466 <HAL_TIM_PWM_Start+0x9e>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d109      	bne.n	8003406 <HAL_TIM_PWM_Start+0x3e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	bf14      	ite	ne
 80033fe:	2301      	movne	r3, #1
 8003400:	2300      	moveq	r3, #0
 8003402:	b2db      	uxtb	r3, r3
 8003404:	e02f      	b.n	8003466 <HAL_TIM_PWM_Start+0x9e>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b08      	cmp	r3, #8
 800340a:	d109      	bne.n	8003420 <HAL_TIM_PWM_Start+0x58>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e022      	b.n	8003466 <HAL_TIM_PWM_Start+0x9e>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b0c      	cmp	r3, #12
 8003424:	d109      	bne.n	800343a <HAL_TIM_PWM_Start+0x72>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	bf14      	ite	ne
 8003432:	2301      	movne	r3, #1
 8003434:	2300      	moveq	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	e015      	b.n	8003466 <HAL_TIM_PWM_Start+0x9e>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b10      	cmp	r3, #16
 800343e:	d109      	bne.n	8003454 <HAL_TIM_PWM_Start+0x8c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e008      	b.n	8003466 <HAL_TIM_PWM_Start+0x9e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b01      	cmp	r3, #1
 800345e:	bf14      	ite	ne
 8003460:	2301      	movne	r3, #1
 8003462:	2300      	moveq	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e09c      	b.n	80035a8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d104      	bne.n	800347e <HAL_TIM_PWM_Start+0xb6>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800347c:	e023      	b.n	80034c6 <HAL_TIM_PWM_Start+0xfe>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b04      	cmp	r3, #4
 8003482:	d104      	bne.n	800348e <HAL_TIM_PWM_Start+0xc6>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800348c:	e01b      	b.n	80034c6 <HAL_TIM_PWM_Start+0xfe>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d104      	bne.n	800349e <HAL_TIM_PWM_Start+0xd6>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800349c:	e013      	b.n	80034c6 <HAL_TIM_PWM_Start+0xfe>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	d104      	bne.n	80034ae <HAL_TIM_PWM_Start+0xe6>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034ac:	e00b      	b.n	80034c6 <HAL_TIM_PWM_Start+0xfe>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b10      	cmp	r3, #16
 80034b2:	d104      	bne.n	80034be <HAL_TIM_PWM_Start+0xf6>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034bc:	e003      	b.n	80034c6 <HAL_TIM_PWM_Start+0xfe>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2201      	movs	r2, #1
 80034cc:	6839      	ldr	r1, [r7, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 fe68 	bl	80041a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a35      	ldr	r2, [pc, #212]	; (80035b0 <HAL_TIM_PWM_Start+0x1e8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_TIM_PWM_Start+0x13e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a34      	ldr	r2, [pc, #208]	; (80035b4 <HAL_TIM_PWM_Start+0x1ec>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00e      	beq.n	8003506 <HAL_TIM_PWM_Start+0x13e>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a32      	ldr	r2, [pc, #200]	; (80035b8 <HAL_TIM_PWM_Start+0x1f0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d009      	beq.n	8003506 <HAL_TIM_PWM_Start+0x13e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a31      	ldr	r2, [pc, #196]	; (80035bc <HAL_TIM_PWM_Start+0x1f4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d004      	beq.n	8003506 <HAL_TIM_PWM_Start+0x13e>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a2f      	ldr	r2, [pc, #188]	; (80035c0 <HAL_TIM_PWM_Start+0x1f8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d101      	bne.n	800350a <HAL_TIM_PWM_Start+0x142>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <HAL_TIM_PWM_Start+0x144>
 800350a:	2300      	movs	r3, #0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a22      	ldr	r2, [pc, #136]	; (80035b0 <HAL_TIM_PWM_Start+0x1e8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01d      	beq.n	8003566 <HAL_TIM_PWM_Start+0x19e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003532:	d018      	beq.n	8003566 <HAL_TIM_PWM_Start+0x19e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a22      	ldr	r2, [pc, #136]	; (80035c4 <HAL_TIM_PWM_Start+0x1fc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d013      	beq.n	8003566 <HAL_TIM_PWM_Start+0x19e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a21      	ldr	r2, [pc, #132]	; (80035c8 <HAL_TIM_PWM_Start+0x200>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00e      	beq.n	8003566 <HAL_TIM_PWM_Start+0x19e>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a1f      	ldr	r2, [pc, #124]	; (80035cc <HAL_TIM_PWM_Start+0x204>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d009      	beq.n	8003566 <HAL_TIM_PWM_Start+0x19e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a17      	ldr	r2, [pc, #92]	; (80035b4 <HAL_TIM_PWM_Start+0x1ec>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d004      	beq.n	8003566 <HAL_TIM_PWM_Start+0x19e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <HAL_TIM_PWM_Start+0x1f0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d115      	bne.n	8003592 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	4b18      	ldr	r3, [pc, #96]	; (80035d0 <HAL_TIM_PWM_Start+0x208>)
 800356e:	4013      	ands	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b06      	cmp	r3, #6
 8003576:	d015      	beq.n	80035a4 <HAL_TIM_PWM_Start+0x1dc>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357e:	d011      	beq.n	80035a4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003590:	e008      	b.n	80035a4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0201 	orr.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	e000      	b.n	80035a6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40012c00 	.word	0x40012c00
 80035b4:	40013400 	.word	0x40013400
 80035b8:	40014000 	.word	0x40014000
 80035bc:	40014400 	.word	0x40014400
 80035c0:	40014800 	.word	0x40014800
 80035c4:	40000400 	.word	0x40000400
 80035c8:	40000800 	.word	0x40000800
 80035cc:	40000c00 	.word	0x40000c00
 80035d0:	00010007 	.word	0x00010007

080035d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e0ff      	b.n	80037f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b14      	cmp	r3, #20
 80035fe:	f200 80f0 	bhi.w	80037e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003602:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003608:	0800365d 	.word	0x0800365d
 800360c:	080037e3 	.word	0x080037e3
 8003610:	080037e3 	.word	0x080037e3
 8003614:	080037e3 	.word	0x080037e3
 8003618:	0800369d 	.word	0x0800369d
 800361c:	080037e3 	.word	0x080037e3
 8003620:	080037e3 	.word	0x080037e3
 8003624:	080037e3 	.word	0x080037e3
 8003628:	080036df 	.word	0x080036df
 800362c:	080037e3 	.word	0x080037e3
 8003630:	080037e3 	.word	0x080037e3
 8003634:	080037e3 	.word	0x080037e3
 8003638:	0800371f 	.word	0x0800371f
 800363c:	080037e3 	.word	0x080037e3
 8003640:	080037e3 	.word	0x080037e3
 8003644:	080037e3 	.word	0x080037e3
 8003648:	08003761 	.word	0x08003761
 800364c:	080037e3 	.word	0x080037e3
 8003650:	080037e3 	.word	0x080037e3
 8003654:	080037e3 	.word	0x080037e3
 8003658:	080037a1 	.word	0x080037a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fa2e 	bl	8003ac4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0208 	orr.w	r2, r2, #8
 8003676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0204 	bic.w	r2, r2, #4
 8003686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6999      	ldr	r1, [r3, #24]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	619a      	str	r2, [r3, #24]
      break;
 800369a:	e0a5      	b.n	80037e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fa9e 	bl	8003be4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6999      	ldr	r1, [r3, #24]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	021a      	lsls	r2, r3, #8
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	619a      	str	r2, [r3, #24]
      break;
 80036dc:	e084      	b.n	80037e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fb07 	bl	8003cf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0208 	orr.w	r2, r2, #8
 80036f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0204 	bic.w	r2, r2, #4
 8003708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69d9      	ldr	r1, [r3, #28]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	61da      	str	r2, [r3, #28]
      break;
 800371c:	e064      	b.n	80037e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68b9      	ldr	r1, [r7, #8]
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fb6f 	bl	8003e08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69d9      	ldr	r1, [r3, #28]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	021a      	lsls	r2, r3, #8
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	61da      	str	r2, [r3, #28]
      break;
 800375e:	e043      	b.n	80037e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fbb8 	bl	8003edc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0208 	orr.w	r2, r2, #8
 800377a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0204 	bic.w	r2, r2, #4
 800378a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800379e:	e023      	b.n	80037e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fbfc 	bl	8003fa4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	021a      	lsls	r2, r3, #8
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037e0:	e002      	b.n	80037e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	75fb      	strb	r3, [r7, #23]
      break;
 80037e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop

080037fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_TIM_ConfigClockSource+0x1c>
 8003814:	2302      	movs	r3, #2
 8003816:	e0b6      	b.n	8003986 <HAL_TIM_ConfigClockSource+0x18a>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003836:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800383a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003842:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003854:	d03e      	beq.n	80038d4 <HAL_TIM_ConfigClockSource+0xd8>
 8003856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385a:	f200 8087 	bhi.w	800396c <HAL_TIM_ConfigClockSource+0x170>
 800385e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003862:	f000 8086 	beq.w	8003972 <HAL_TIM_ConfigClockSource+0x176>
 8003866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386a:	d87f      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x170>
 800386c:	2b70      	cmp	r3, #112	; 0x70
 800386e:	d01a      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0xaa>
 8003870:	2b70      	cmp	r3, #112	; 0x70
 8003872:	d87b      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x170>
 8003874:	2b60      	cmp	r3, #96	; 0x60
 8003876:	d050      	beq.n	800391a <HAL_TIM_ConfigClockSource+0x11e>
 8003878:	2b60      	cmp	r3, #96	; 0x60
 800387a:	d877      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x170>
 800387c:	2b50      	cmp	r3, #80	; 0x50
 800387e:	d03c      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0xfe>
 8003880:	2b50      	cmp	r3, #80	; 0x50
 8003882:	d873      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x170>
 8003884:	2b40      	cmp	r3, #64	; 0x40
 8003886:	d058      	beq.n	800393a <HAL_TIM_ConfigClockSource+0x13e>
 8003888:	2b40      	cmp	r3, #64	; 0x40
 800388a:	d86f      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x170>
 800388c:	2b30      	cmp	r3, #48	; 0x30
 800388e:	d064      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x15e>
 8003890:	2b30      	cmp	r3, #48	; 0x30
 8003892:	d86b      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x170>
 8003894:	2b20      	cmp	r3, #32
 8003896:	d060      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x15e>
 8003898:	2b20      	cmp	r3, #32
 800389a:	d867      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x170>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d05c      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x15e>
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d05a      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x15e>
 80038a4:	e062      	b.n	800396c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6899      	ldr	r1, [r3, #8]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f000 fc55 	bl	8004164 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	609a      	str	r2, [r3, #8]
      break;
 80038d2:	e04f      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	6899      	ldr	r1, [r3, #8]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f000 fc3e 	bl	8004164 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038f6:	609a      	str	r2, [r3, #8]
      break;
 80038f8:	e03c      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	6859      	ldr	r1, [r3, #4]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	461a      	mov	r2, r3
 8003908:	f000 fbb2 	bl	8004070 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2150      	movs	r1, #80	; 0x50
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fc0b 	bl	800412e <TIM_ITRx_SetConfig>
      break;
 8003918:	e02c      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6859      	ldr	r1, [r3, #4]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	461a      	mov	r2, r3
 8003928:	f000 fbd1 	bl	80040ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2160      	movs	r1, #96	; 0x60
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fbfb 	bl	800412e <TIM_ITRx_SetConfig>
      break;
 8003938:	e01c      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6859      	ldr	r1, [r3, #4]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	461a      	mov	r2, r3
 8003948:	f000 fb92 	bl	8004070 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2140      	movs	r1, #64	; 0x40
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fbeb 	bl	800412e <TIM_ITRx_SetConfig>
      break;
 8003958:	e00c      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f000 fbe2 	bl	800412e <TIM_ITRx_SetConfig>
      break;
 800396a:	e003      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      break;
 8003970:	e000      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003972:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003984:	7bfb      	ldrb	r3, [r7, #15]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a40      	ldr	r2, [pc, #256]	; (8003aa4 <TIM_Base_SetConfig+0x114>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d013      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ae:	d00f      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a3d      	ldr	r2, [pc, #244]	; (8003aa8 <TIM_Base_SetConfig+0x118>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00b      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a3c      	ldr	r2, [pc, #240]	; (8003aac <TIM_Base_SetConfig+0x11c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d007      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a3b      	ldr	r2, [pc, #236]	; (8003ab0 <TIM_Base_SetConfig+0x120>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d003      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a3a      	ldr	r2, [pc, #232]	; (8003ab4 <TIM_Base_SetConfig+0x124>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d108      	bne.n	80039e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2f      	ldr	r2, [pc, #188]	; (8003aa4 <TIM_Base_SetConfig+0x114>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d01f      	beq.n	8003a2a <TIM_Base_SetConfig+0x9a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f0:	d01b      	beq.n	8003a2a <TIM_Base_SetConfig+0x9a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2c      	ldr	r2, [pc, #176]	; (8003aa8 <TIM_Base_SetConfig+0x118>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d017      	beq.n	8003a2a <TIM_Base_SetConfig+0x9a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a2b      	ldr	r2, [pc, #172]	; (8003aac <TIM_Base_SetConfig+0x11c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <TIM_Base_SetConfig+0x9a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a2a      	ldr	r2, [pc, #168]	; (8003ab0 <TIM_Base_SetConfig+0x120>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00f      	beq.n	8003a2a <TIM_Base_SetConfig+0x9a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a29      	ldr	r2, [pc, #164]	; (8003ab4 <TIM_Base_SetConfig+0x124>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00b      	beq.n	8003a2a <TIM_Base_SetConfig+0x9a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a28      	ldr	r2, [pc, #160]	; (8003ab8 <TIM_Base_SetConfig+0x128>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d007      	beq.n	8003a2a <TIM_Base_SetConfig+0x9a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a27      	ldr	r2, [pc, #156]	; (8003abc <TIM_Base_SetConfig+0x12c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d003      	beq.n	8003a2a <TIM_Base_SetConfig+0x9a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a26      	ldr	r2, [pc, #152]	; (8003ac0 <TIM_Base_SetConfig+0x130>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d108      	bne.n	8003a3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a10      	ldr	r2, [pc, #64]	; (8003aa4 <TIM_Base_SetConfig+0x114>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00f      	beq.n	8003a88 <TIM_Base_SetConfig+0xf8>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <TIM_Base_SetConfig+0x124>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00b      	beq.n	8003a88 <TIM_Base_SetConfig+0xf8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a11      	ldr	r2, [pc, #68]	; (8003ab8 <TIM_Base_SetConfig+0x128>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d007      	beq.n	8003a88 <TIM_Base_SetConfig+0xf8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a10      	ldr	r2, [pc, #64]	; (8003abc <TIM_Base_SetConfig+0x12c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d003      	beq.n	8003a88 <TIM_Base_SetConfig+0xf8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a0f      	ldr	r2, [pc, #60]	; (8003ac0 <TIM_Base_SetConfig+0x130>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d103      	bne.n	8003a90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	615a      	str	r2, [r3, #20]
}
 8003a96:	bf00      	nop
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	40000400 	.word	0x40000400
 8003aac:	40000800 	.word	0x40000800
 8003ab0:	40000c00 	.word	0x40000c00
 8003ab4:	40013400 	.word	0x40013400
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40014400 	.word	0x40014400
 8003ac0:	40014800 	.word	0x40014800

08003ac4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f023 0201 	bic.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0303 	bic.w	r3, r3, #3
 8003afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f023 0302 	bic.w	r3, r3, #2
 8003b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a2c      	ldr	r2, [pc, #176]	; (8003bd0 <TIM_OC1_SetConfig+0x10c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00f      	beq.n	8003b44 <TIM_OC1_SetConfig+0x80>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a2b      	ldr	r2, [pc, #172]	; (8003bd4 <TIM_OC1_SetConfig+0x110>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00b      	beq.n	8003b44 <TIM_OC1_SetConfig+0x80>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <TIM_OC1_SetConfig+0x114>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d007      	beq.n	8003b44 <TIM_OC1_SetConfig+0x80>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a29      	ldr	r2, [pc, #164]	; (8003bdc <TIM_OC1_SetConfig+0x118>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <TIM_OC1_SetConfig+0x80>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a28      	ldr	r2, [pc, #160]	; (8003be0 <TIM_OC1_SetConfig+0x11c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d10c      	bne.n	8003b5e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f023 0308 	bic.w	r3, r3, #8
 8003b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f023 0304 	bic.w	r3, r3, #4
 8003b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a1b      	ldr	r2, [pc, #108]	; (8003bd0 <TIM_OC1_SetConfig+0x10c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00f      	beq.n	8003b86 <TIM_OC1_SetConfig+0xc2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a1a      	ldr	r2, [pc, #104]	; (8003bd4 <TIM_OC1_SetConfig+0x110>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00b      	beq.n	8003b86 <TIM_OC1_SetConfig+0xc2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a19      	ldr	r2, [pc, #100]	; (8003bd8 <TIM_OC1_SetConfig+0x114>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d007      	beq.n	8003b86 <TIM_OC1_SetConfig+0xc2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a18      	ldr	r2, [pc, #96]	; (8003bdc <TIM_OC1_SetConfig+0x118>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <TIM_OC1_SetConfig+0xc2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a17      	ldr	r2, [pc, #92]	; (8003be0 <TIM_OC1_SetConfig+0x11c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d111      	bne.n	8003baa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	621a      	str	r2, [r3, #32]
}
 8003bc4:	bf00      	nop
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	40012c00 	.word	0x40012c00
 8003bd4:	40013400 	.word	0x40013400
 8003bd8:	40014000 	.word	0x40014000
 8003bdc:	40014400 	.word	0x40014400
 8003be0:	40014800 	.word	0x40014800

08003be4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	f023 0210 	bic.w	r2, r3, #16
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	021b      	lsls	r3, r3, #8
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f023 0320 	bic.w	r3, r3, #32
 8003c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a28      	ldr	r2, [pc, #160]	; (8003ce4 <TIM_OC2_SetConfig+0x100>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d003      	beq.n	8003c50 <TIM_OC2_SetConfig+0x6c>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a27      	ldr	r2, [pc, #156]	; (8003ce8 <TIM_OC2_SetConfig+0x104>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d10d      	bne.n	8003c6c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <TIM_OC2_SetConfig+0x100>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00f      	beq.n	8003c94 <TIM_OC2_SetConfig+0xb0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <TIM_OC2_SetConfig+0x104>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00b      	beq.n	8003c94 <TIM_OC2_SetConfig+0xb0>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a1b      	ldr	r2, [pc, #108]	; (8003cec <TIM_OC2_SetConfig+0x108>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d007      	beq.n	8003c94 <TIM_OC2_SetConfig+0xb0>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a1a      	ldr	r2, [pc, #104]	; (8003cf0 <TIM_OC2_SetConfig+0x10c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d003      	beq.n	8003c94 <TIM_OC2_SetConfig+0xb0>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a19      	ldr	r2, [pc, #100]	; (8003cf4 <TIM_OC2_SetConfig+0x110>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d113      	bne.n	8003cbc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	621a      	str	r2, [r3, #32]
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40012c00 	.word	0x40012c00
 8003ce8:	40013400 	.word	0x40013400
 8003cec:	40014000 	.word	0x40014000
 8003cf0:	40014400 	.word	0x40014400
 8003cf4:	40014800 	.word	0x40014800

08003cf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0303 	bic.w	r3, r3, #3
 8003d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a27      	ldr	r2, [pc, #156]	; (8003df4 <TIM_OC3_SetConfig+0xfc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d003      	beq.n	8003d62 <TIM_OC3_SetConfig+0x6a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a26      	ldr	r2, [pc, #152]	; (8003df8 <TIM_OC3_SetConfig+0x100>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d10d      	bne.n	8003d7e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a1c      	ldr	r2, [pc, #112]	; (8003df4 <TIM_OC3_SetConfig+0xfc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00f      	beq.n	8003da6 <TIM_OC3_SetConfig+0xae>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a1b      	ldr	r2, [pc, #108]	; (8003df8 <TIM_OC3_SetConfig+0x100>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00b      	beq.n	8003da6 <TIM_OC3_SetConfig+0xae>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a1a      	ldr	r2, [pc, #104]	; (8003dfc <TIM_OC3_SetConfig+0x104>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d007      	beq.n	8003da6 <TIM_OC3_SetConfig+0xae>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <TIM_OC3_SetConfig+0x108>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <TIM_OC3_SetConfig+0xae>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a18      	ldr	r2, [pc, #96]	; (8003e04 <TIM_OC3_SetConfig+0x10c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d113      	bne.n	8003dce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	621a      	str	r2, [r3, #32]
}
 8003de8:	bf00      	nop
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	40012c00 	.word	0x40012c00
 8003df8:	40013400 	.word	0x40013400
 8003dfc:	40014000 	.word	0x40014000
 8003e00:	40014400 	.word	0x40014400
 8003e04:	40014800 	.word	0x40014800

08003e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	031b      	lsls	r3, r3, #12
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a18      	ldr	r2, [pc, #96]	; (8003ec8 <TIM_OC4_SetConfig+0xc0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00f      	beq.n	8003e8c <TIM_OC4_SetConfig+0x84>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a17      	ldr	r2, [pc, #92]	; (8003ecc <TIM_OC4_SetConfig+0xc4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00b      	beq.n	8003e8c <TIM_OC4_SetConfig+0x84>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a16      	ldr	r2, [pc, #88]	; (8003ed0 <TIM_OC4_SetConfig+0xc8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d007      	beq.n	8003e8c <TIM_OC4_SetConfig+0x84>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a15      	ldr	r2, [pc, #84]	; (8003ed4 <TIM_OC4_SetConfig+0xcc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d003      	beq.n	8003e8c <TIM_OC4_SetConfig+0x84>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a14      	ldr	r2, [pc, #80]	; (8003ed8 <TIM_OC4_SetConfig+0xd0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d109      	bne.n	8003ea0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	019b      	lsls	r3, r3, #6
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	621a      	str	r2, [r3, #32]
}
 8003eba:	bf00      	nop
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40012c00 	.word	0x40012c00
 8003ecc:	40013400 	.word	0x40013400
 8003ed0:	40014000 	.word	0x40014000
 8003ed4:	40014400 	.word	0x40014400
 8003ed8:	40014800 	.word	0x40014800

08003edc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	041b      	lsls	r3, r3, #16
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a17      	ldr	r2, [pc, #92]	; (8003f90 <TIM_OC5_SetConfig+0xb4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00f      	beq.n	8003f56 <TIM_OC5_SetConfig+0x7a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a16      	ldr	r2, [pc, #88]	; (8003f94 <TIM_OC5_SetConfig+0xb8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00b      	beq.n	8003f56 <TIM_OC5_SetConfig+0x7a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a15      	ldr	r2, [pc, #84]	; (8003f98 <TIM_OC5_SetConfig+0xbc>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d007      	beq.n	8003f56 <TIM_OC5_SetConfig+0x7a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <TIM_OC5_SetConfig+0xc0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d003      	beq.n	8003f56 <TIM_OC5_SetConfig+0x7a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a13      	ldr	r2, [pc, #76]	; (8003fa0 <TIM_OC5_SetConfig+0xc4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d109      	bne.n	8003f6a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	621a      	str	r2, [r3, #32]
}
 8003f84:	bf00      	nop
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40013400 	.word	0x40013400
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40014400 	.word	0x40014400
 8003fa0:	40014800 	.word	0x40014800

08003fa4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	051b      	lsls	r3, r3, #20
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a18      	ldr	r2, [pc, #96]	; (800405c <TIM_OC6_SetConfig+0xb8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00f      	beq.n	8004020 <TIM_OC6_SetConfig+0x7c>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a17      	ldr	r2, [pc, #92]	; (8004060 <TIM_OC6_SetConfig+0xbc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00b      	beq.n	8004020 <TIM_OC6_SetConfig+0x7c>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a16      	ldr	r2, [pc, #88]	; (8004064 <TIM_OC6_SetConfig+0xc0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d007      	beq.n	8004020 <TIM_OC6_SetConfig+0x7c>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a15      	ldr	r2, [pc, #84]	; (8004068 <TIM_OC6_SetConfig+0xc4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d003      	beq.n	8004020 <TIM_OC6_SetConfig+0x7c>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a14      	ldr	r2, [pc, #80]	; (800406c <TIM_OC6_SetConfig+0xc8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d109      	bne.n	8004034 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004026:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	029b      	lsls	r3, r3, #10
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4313      	orrs	r3, r2
 8004032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	621a      	str	r2, [r3, #32]
}
 800404e:	bf00      	nop
 8004050:	371c      	adds	r7, #28
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40012c00 	.word	0x40012c00
 8004060:	40013400 	.word	0x40013400
 8004064:	40014000 	.word	0x40014000
 8004068:	40014400 	.word	0x40014400
 800406c:	40014800 	.word	0x40014800

08004070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	f023 0201 	bic.w	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800409a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f023 030a 	bic.w	r3, r3, #10
 80040ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	621a      	str	r2, [r3, #32]
}
 80040c2:	bf00      	nop
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b087      	sub	sp, #28
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f023 0210 	bic.w	r2, r3, #16
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	031b      	lsls	r3, r3, #12
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800410a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004144:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	f043 0307 	orr.w	r3, r3, #7
 8004150:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	609a      	str	r2, [r3, #8]
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800417e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	021a      	lsls	r2, r3, #8
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	431a      	orrs	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4313      	orrs	r3, r2
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	609a      	str	r2, [r3, #8]
}
 8004198:	bf00      	nop
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	2201      	movs	r2, #1
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a1a      	ldr	r2, [r3, #32]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	43db      	mvns	r3, r3
 80041c6:	401a      	ands	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a1a      	ldr	r2, [r3, #32]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	fa01 f303 	lsl.w	r3, r1, r3
 80041dc:	431a      	orrs	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
	...

080041f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004204:	2302      	movs	r3, #2
 8004206:	e068      	b.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a2e      	ldr	r2, [pc, #184]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2d      	ldr	r2, [pc, #180]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d108      	bne.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004242:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004254:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1e      	ldr	r2, [pc, #120]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d01d      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427a:	d018      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1b      	ldr	r2, [pc, #108]	; (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1a      	ldr	r2, [pc, #104]	; (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00e      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a18      	ldr	r2, [pc, #96]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d009      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a13      	ldr	r2, [pc, #76]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a14      	ldr	r2, [pc, #80]	; (80042fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d10c      	bne.n	80042c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40013400 	.word	0x40013400
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40000800 	.word	0x40000800
 80042f8:	40000c00 	.word	0x40000c00
 80042fc:	40014000 	.word	0x40014000

08004300 <__libc_init_array>:
 8004300:	b570      	push	{r4, r5, r6, lr}
 8004302:	4d0d      	ldr	r5, [pc, #52]	; (8004338 <__libc_init_array+0x38>)
 8004304:	4c0d      	ldr	r4, [pc, #52]	; (800433c <__libc_init_array+0x3c>)
 8004306:	1b64      	subs	r4, r4, r5
 8004308:	10a4      	asrs	r4, r4, #2
 800430a:	2600      	movs	r6, #0
 800430c:	42a6      	cmp	r6, r4
 800430e:	d109      	bne.n	8004324 <__libc_init_array+0x24>
 8004310:	4d0b      	ldr	r5, [pc, #44]	; (8004340 <__libc_init_array+0x40>)
 8004312:	4c0c      	ldr	r4, [pc, #48]	; (8004344 <__libc_init_array+0x44>)
 8004314:	f000 f820 	bl	8004358 <_init>
 8004318:	1b64      	subs	r4, r4, r5
 800431a:	10a4      	asrs	r4, r4, #2
 800431c:	2600      	movs	r6, #0
 800431e:	42a6      	cmp	r6, r4
 8004320:	d105      	bne.n	800432e <__libc_init_array+0x2e>
 8004322:	bd70      	pop	{r4, r5, r6, pc}
 8004324:	f855 3b04 	ldr.w	r3, [r5], #4
 8004328:	4798      	blx	r3
 800432a:	3601      	adds	r6, #1
 800432c:	e7ee      	b.n	800430c <__libc_init_array+0xc>
 800432e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004332:	4798      	blx	r3
 8004334:	3601      	adds	r6, #1
 8004336:	e7f2      	b.n	800431e <__libc_init_array+0x1e>
 8004338:	080043b0 	.word	0x080043b0
 800433c:	080043b0 	.word	0x080043b0
 8004340:	080043b0 	.word	0x080043b0
 8004344:	080043b4 	.word	0x080043b4

08004348 <memset>:
 8004348:	4402      	add	r2, r0
 800434a:	4603      	mov	r3, r0
 800434c:	4293      	cmp	r3, r2
 800434e:	d100      	bne.n	8004352 <memset+0xa>
 8004350:	4770      	bx	lr
 8004352:	f803 1b01 	strb.w	r1, [r3], #1
 8004356:	e7f9      	b.n	800434c <memset+0x4>

08004358 <_init>:
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435a:	bf00      	nop
 800435c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435e:	bc08      	pop	{r3}
 8004360:	469e      	mov	lr, r3
 8004362:	4770      	bx	lr

08004364 <_fini>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	bf00      	nop
 8004368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436a:	bc08      	pop	{r3}
 800436c:	469e      	mov	lr, r3
 800436e:	4770      	bx	lr
